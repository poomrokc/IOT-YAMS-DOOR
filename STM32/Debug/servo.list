
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08009988  08009988  00019988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c0  080099c0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c8  080099c8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080099d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  08009a60  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08009a60  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea6f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e89  00000000  00000000  0003eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f8  00000000  00000000  000429b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026342  00000000  00000000  00045a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015d58  00000000  00000000  0006bd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8e43  00000000  00000000  00081a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd8  00000000  00000000  0015a958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800996c 	.word	0x0800996c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800996c 	.word	0x0800996c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fd07 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f008 fb7e 	bl	8008c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fd1f 	bl	8000f7e <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 fce7 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	200000c0 	.word	0x200000c0

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000c0 	.word	0x200000c0

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d101      	bne.n	8000616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e033      	b.n	800067e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f008 fb1c 	bl	8008c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	2b00      	cmp	r3, #0
 800063c:	d118      	bne.n	8000670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000646:	f023 0302 	bic.w	r3, r3, #2
 800064a:	f043 0202 	orr.w	r2, r3, #2
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 fa92 	bl	8000b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f023 0303 	bic.w	r3, r3, #3
 8000666:	f043 0201 	orr.w	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	641a      	str	r2, [r3, #64]	; 0x40
 800066e:	e001      	b.n	8000674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800069a:	2b01      	cmp	r3, #1
 800069c:	d101      	bne.n	80006a2 <HAL_ADC_Start+0x1a>
 800069e:	2302      	movs	r3, #2
 80006a0:	e0a5      	b.n	80007ee <HAL_ADC_Start+0x166>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2201      	movs	r2, #1
 80006a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d018      	beq.n	80006ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0201 	orr.w	r2, r2, #1
 80006c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006c8:	4b4c      	ldr	r3, [pc, #304]	; (80007fc <HAL_ADC_Start+0x174>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a4c      	ldr	r2, [pc, #304]	; (8000800 <HAL_ADC_Start+0x178>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	0c9a      	lsrs	r2, r3, #18
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006dc:	e002      	b.n	80006e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f9      	bne.n	80006de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d179      	bne.n	80007ec <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000700:	f023 0301 	bic.w	r3, r3, #1
 8000704:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000736:	d106      	bne.n	8000746 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073c:	f023 0206 	bic.w	r2, r3, #6
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	645a      	str	r2, [r3, #68]	; 0x44
 8000744:	e002      	b.n	800074c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ADC_Start+0x17c>)
 8000756:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000760:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	2b00      	cmp	r3, #0
 800076c:	d12a      	bne.n	80007c4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <HAL_ADC_Start+0x180>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d015      	beq.n	80007a4 <HAL_ADC_Start+0x11c>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a23      	ldr	r2, [pc, #140]	; (800080c <HAL_ADC_Start+0x184>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d105      	bne.n	800078e <HAL_ADC_Start+0x106>
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HAL_ADC_Start+0x17c>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <HAL_ADC_Start+0x188>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d129      	bne.n	80007ec <HAL_ADC_Start+0x164>
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_ADC_Start+0x17c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 031f 	and.w	r3, r3, #31
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d823      	bhi.n	80007ec <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11c      	bne.n	80007ec <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	e013      	b.n	80007ec <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_ADC_Start+0x180>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10e      	bne.n	80007ec <HAL_ADC_Start+0x164>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d107      	bne.n	80007ec <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	431bde83 	.word	0x431bde83
 8000804:	40012300 	.word	0x40012300
 8000808:	40012000 	.word	0x40012000
 800080c:	40012100 	.word	0x40012100
 8000810:	40012200 	.word	0x40012200

08000814 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800082c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000830:	d113      	bne.n	800085a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800083c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000840:	d10b      	bne.n	800085a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f043 0220 	orr.w	r2, r3, #32
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e05c      	b.n	8000914 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800085a:	f7ff fea3 	bl	80005a4 <HAL_GetTick>
 800085e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000860:	e01a      	b.n	8000898 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000868:	d016      	beq.n	8000898 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <HAL_ADC_PollForConversion+0x6c>
 8000870:	f7ff fe98 	bl	80005a4 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d20b      	bcs.n	8000898 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f043 0204 	orr.w	r2, r3, #4
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000894:	2303      	movs	r3, #3
 8000896:	e03d      	b.n	8000914 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d1dd      	bne.n	8000862 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f06f 0212 	mvn.w	r2, #18
 80008ae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d123      	bne.n	8000912 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d11f      	bne.n	8000912 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d006      	beq.n	80008ee <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d111      	bne.n	8000912 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	f043 0201 	orr.w	r2, r3, #1
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800094c:	2b01      	cmp	r3, #1
 800094e:	d101      	bne.n	8000954 <HAL_ADC_ConfigChannel+0x1c>
 8000950:	2302      	movs	r3, #2
 8000952:	e105      	b.n	8000b60 <HAL_ADC_ConfigChannel+0x228>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b09      	cmp	r3, #9
 8000962:	d925      	bls.n	80009b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68d9      	ldr	r1, [r3, #12]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	b29b      	uxth	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	3b1e      	subs	r3, #30
 800097a:	2207      	movs	r2, #7
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43da      	mvns	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	400a      	ands	r2, r1
 8000988:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68d9      	ldr	r1, [r3, #12]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	4603      	mov	r3, r0
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	4403      	add	r3, r0
 80009a2:	3b1e      	subs	r3, #30
 80009a4:	409a      	lsls	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	e022      	b.n	80009f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6919      	ldr	r1, [r3, #16]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	2207      	movs	r2, #7
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	400a      	ands	r2, r1
 80009d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6919      	ldr	r1, [r3, #16]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	4603      	mov	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4403      	add	r3, r0
 80009ec:	409a      	lsls	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d824      	bhi.n	8000a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	3b05      	subs	r3, #5
 8000a10:	221f      	movs	r2, #31
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	3b05      	subs	r3, #5
 8000a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	e04c      	b.n	8000ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2b0c      	cmp	r3, #12
 8000a4e:	d824      	bhi.n	8000a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	3b23      	subs	r3, #35	; 0x23
 8000a62:	221f      	movs	r2, #31
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	400a      	ands	r2, r1
 8000a70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	3b23      	subs	r3, #35	; 0x23
 8000a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	631a      	str	r2, [r3, #48]	; 0x30
 8000a98:	e023      	b.n	8000ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	4413      	add	r3, r2
 8000aaa:	3b41      	subs	r3, #65	; 0x41
 8000aac:	221f      	movs	r2, #31
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	400a      	ands	r2, r1
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3b41      	subs	r3, #65	; 0x41
 8000ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <HAL_ADC_ConfigChannel+0x234>)
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_ADC_ConfigChannel+0x238>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d109      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x1cc>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b12      	cmp	r3, #18
 8000af6:	d105      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_ADC_ConfigChannel+0x238>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d123      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x21e>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d003      	beq.n	8000b1e <HAL_ADC_ConfigChannel+0x1e6>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b11      	cmp	r3, #17
 8000b1c:	d11b      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d111      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_ADC_ConfigChannel+0x23c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_ADC_ConfigChannel+0x240>)
 8000b38:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3c:	0c9a      	lsrs	r2, r3, #18
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b48:	e002      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1f9      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40012300 	.word	0x40012300
 8000b70:	40012000 	.word	0x40012000
 8000b74:	20000028 	.word	0x20000028
 8000b78:	431bde83 	.word	0x431bde83

08000b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b84:	4b79      	ldr	r3, [pc, #484]	; (8000d6c <ADC_Init+0x1f0>)
 8000b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6859      	ldr	r1, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	021a      	lsls	r2, r3, #8
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6859      	ldr	r1, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6899      	ldr	r1, [r3, #8]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	4a58      	ldr	r2, [pc, #352]	; (8000d70 <ADC_Init+0x1f4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d022      	beq.n	8000c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6899      	ldr	r1, [r3, #8]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6899      	ldr	r1, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	e00f      	b.n	8000c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 0202 	bic.w	r2, r2, #2
 8000c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6899      	ldr	r1, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e1b      	ldrb	r3, [r3, #24]
 8000c94:	005a      	lsls	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d01b      	beq.n	8000ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6859      	ldr	r1, [r3, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	035a      	lsls	r2, r3, #13
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	e007      	b.n	8000cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	051a      	lsls	r2, r3, #20
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6899      	ldr	r1, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d32:	025a      	lsls	r2, r3, #9
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6899      	ldr	r1, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	029a      	lsls	r2, r3, #10
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	609a      	str	r2, [r3, #8]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40012300 	.word	0x40012300
 8000d70:	0f000001 	.word	0x0f000001

08000d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d90:	4013      	ands	r3, r2
 8000d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	f003 0307 	and.w	r3, r3, #7
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	db0b      	blt.n	8000e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 021f 	and.w	r2, r3, #31
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <__NVIC_EnableIRQ+0x38>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	095b      	lsrs	r3, r3, #5
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	; (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	; 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff29 	bl	8000d74 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3c:	f7ff ff3e 	bl	8000dbc <__NVIC_GetPriorityGrouping>
 8000f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	6978      	ldr	r0, [r7, #20]
 8000f48:	f7ff ff8e 	bl	8000e68 <NVIC_EncodePriority>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	bf00      	nop
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff31 	bl	8000dd8 <__NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffa2 	bl	8000ed0 <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e16b      	b.n	800128c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 815a 	bne.w	8001286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe6:	2b11      	cmp	r3, #17
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0xfc>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80b4 	beq.w	8001286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a5e      	ldr	r2, [pc, #376]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x310>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x324>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_GPIO_Init+0x328>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x20e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x20a>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_GPIO_Init+0x330>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001202:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae90 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	401a      	ands	r2, r3
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	429a      	cmp	r2, r3
 8001346:	d104      	bne.n	8001352 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001348:	887b      	ldrh	r3, [r7, #2]
 800134a:	041a      	lsls	r2, r3, #16
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001350:	e002      	b.n	8001358 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	b08f      	sub	sp, #60	; 0x3c
 8001368:	af0a      	add	r7, sp, #40	; 0x28
 800136a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e054      	b.n	8001420 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f007 ff1b 	bl	80091cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2203      	movs	r2, #3
 800139a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fb85 	bl	8005ac4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	687e      	ldr	r6, [r7, #4]
 80013c2:	466d      	mov	r5, sp
 80013c4:	f106 0410 	add.w	r4, r6, #16
 80013c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d8:	1d33      	adds	r3, r6, #4
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f004 faff 	bl	80059e0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2101      	movs	r1, #1
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fb7c 	bl	8005ae6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	687e      	ldr	r6, [r7, #4]
 80013f6:	466d      	mov	r5, sp
 80013f8:	f106 0410 	add.w	r4, r6, #16
 80013fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001404:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001408:	e885 0003 	stmia.w	r5, {r0, r1}
 800140c:	1d33      	adds	r3, r6, #4
 800140e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f004 fc8f 	bl	8005d34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001428 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af04      	add	r7, sp, #16
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4603      	mov	r3, r0
 8001438:	70fb      	strb	r3, [r7, #3]
 800143a:	460b      	mov	r3, r1
 800143c:	70bb      	strb	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_HCD_HC_Init+0x28>
 800144c:	2302      	movs	r3, #2
 800144e:	e07f      	b.n	8001550 <HAL_HCD_HC_Init+0x128>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	333d      	adds	r3, #61	; 0x3d
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800146c:	78fa      	ldrb	r2, [r7, #3]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3338      	adds	r3, #56	; 0x38
 800147c:	787a      	ldrb	r2, [r7, #1]
 800147e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	3340      	adds	r3, #64	; 0x40
 8001490:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001492:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3339      	adds	r3, #57	; 0x39
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	333f      	adds	r3, #63	; 0x3f
 80014b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	78bb      	ldrb	r3, [r7, #2]
 80014c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c6:	b2d8      	uxtb	r0, r3
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	333a      	adds	r3, #58	; 0x3a
 80014d6:	4602      	mov	r2, r0
 80014d8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80014da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da0a      	bge.n	80014f8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	333b      	adds	r3, #59	; 0x3b
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e009      	b.n	800150c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	333b      	adds	r3, #59	; 0x3b
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	333c      	adds	r3, #60	; 0x3c
 800151c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001520:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	787c      	ldrb	r4, [r7, #1]
 8001528:	78ba      	ldrb	r2, [r7, #2]
 800152a:	78f9      	ldrb	r1, [r7, #3]
 800152c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	4623      	mov	r3, r4
 800153e:	f004 fd7b 	bl	8006038 <USB_HC_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_HCD_HC_Halt+0x1e>
 8001572:	2302      	movs	r3, #2
 8001574:	e00f      	b.n	8001596 <HAL_HCD_HC_Halt+0x3e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f004 ffb5 	bl	80064f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70bb      	strb	r3, [r7, #2]
 80015b6:	4613      	mov	r3, r2
 80015b8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	333b      	adds	r3, #59	; 0x3b
 80015ca:	78ba      	ldrb	r2, [r7, #2]
 80015cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	333f      	adds	r3, #63	; 0x3f
 80015de:	787a      	ldrb	r2, [r7, #1]
 80015e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80015e2:	7c3b      	ldrb	r3, [r7, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10a      	bne.n	80015fe <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3342      	adds	r3, #66	; 0x42
 80015f8:	2203      	movs	r2, #3
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	e009      	b.n	8001612 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3342      	adds	r3, #66	; 0x42
 800160e:	2202      	movs	r2, #2
 8001610:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001612:	787b      	ldrb	r3, [r7, #1]
 8001614:	2b03      	cmp	r3, #3
 8001616:	f200 80d6 	bhi.w	80017c6 <HAL_HCD_HC_SubmitRequest+0x226>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <HAL_HCD_HC_SubmitRequest+0x80>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	08001631 	.word	0x08001631
 8001624:	080017b1 	.word	0x080017b1
 8001628:	0800169d 	.word	0x0800169d
 800162c:	08001727 	.word	0x08001727
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001630:	7c3b      	ldrb	r3, [r7, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	f040 80c9 	bne.w	80017ca <HAL_HCD_HC_SubmitRequest+0x22a>
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80c5 	bne.w	80017ca <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001640:	8b3b      	ldrh	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3351      	adds	r3, #81	; 0x51
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800165a:	78fa      	ldrb	r2, [r7, #3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	3351      	adds	r3, #81	; 0x51
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10a      	bne.n	8001686 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3342      	adds	r3, #66	; 0x42
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001684:	e0a1      	b.n	80017ca <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3342      	adds	r3, #66	; 0x42
 8001696:	2202      	movs	r2, #2
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	e096      	b.n	80017ca <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d120      	bne.n	80016e4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	3351      	adds	r3, #81	; 0x51
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3342      	adds	r3, #66	; 0x42
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80016cc:	e07e      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3342      	adds	r3, #66	; 0x42
 80016de:	2202      	movs	r2, #2
 80016e0:	701a      	strb	r2, [r3, #0]
      break;
 80016e2:	e073      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	3350      	adds	r3, #80	; 0x50
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3342      	adds	r3, #66	; 0x42
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
      break;
 800170e:	e05d      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3342      	adds	r3, #66	; 0x42
 8001720:	2202      	movs	r2, #2
 8001722:	701a      	strb	r2, [r3, #0]
      break;
 8001724:	e052      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001726:	78bb      	ldrb	r3, [r7, #2]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d120      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3351      	adds	r3, #81	; 0x51
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3342      	adds	r3, #66	; 0x42
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001756:	e039      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	440b      	add	r3, r1
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e02e      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3350      	adds	r3, #80	; 0x50
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10a      	bne.n	800179a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3342      	adds	r3, #66	; 0x42
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
      break;
 8001798:	e018      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	3342      	adds	r3, #66	; 0x42
 80017aa:	2202      	movs	r2, #2
 80017ac:	701a      	strb	r2, [r3, #0]
      break;
 80017ae:	e00d      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
      break;
 80017c4:	e002      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80017c6:	bf00      	nop
 80017c8:	e000      	b.n	80017cc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80017ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3344      	adds	r3, #68	; 0x44
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	8b39      	ldrh	r1, [r7, #24]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4403      	add	r3, r0
 80017f0:	3348      	adds	r3, #72	; 0x48
 80017f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	335c      	adds	r3, #92	; 0x5c
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	334c      	adds	r3, #76	; 0x4c
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3339      	adds	r3, #57	; 0x39
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	335d      	adds	r3, #93	; 0x5d
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	3338      	adds	r3, #56	; 0x38
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	18d1      	adds	r1, r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	f004 fcf4 	bl	800624c <USB_HC_StartXfer>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop

08001870 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fa11 	bl	8005cae <USB_GetMode>
 800188c:	4603      	mov	r3, r0
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 80f1 	bne.w	8001a76 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f004 f9f5 	bl	8005c88 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80e7 	beq.w	8001a74 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f9ec 	bl	8005c88 <USB_ReadInterrupts>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ba:	d104      	bne.n	80018c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 f9dc 	bl	8005c88 <USB_ReadInterrupts>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018da:	d104      	bne.n	80018e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 f9cc 	bl	8005c88 <USB_ReadInterrupts>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018fa:	d104      	bne.n	8001906 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001904:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f004 f9bc 	bl	8005c88 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d103      	bne.n	8001922 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2202      	movs	r2, #2
 8001920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f004 f9ae 	bl	8005c88 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001936:	d117      	bne.n	8001968 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001946:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800194a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f007 fcbb 	bl	80092c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f004 faa7 	bl	8005eac <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f004 f98b 	bl	8005c88 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800197c:	d102      	bne.n	8001984 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f001 f8c8 	bl	8002b14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f97d 	bl	8005c88 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b08      	cmp	r3, #8
 8001996:	d106      	bne.n	80019a6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f007 fc79 	bl	8009290 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2208      	movs	r2, #8
 80019a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 f96c 	bl	8005c88 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ba:	d138      	bne.n	8001a2e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f004 fd87 	bl	80064d4 <USB_HC_ReadInterrupt>
 80019c6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e025      	b.n	8001a1a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d018      	beq.n	8001a14 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f8:	d106      	bne.n	8001a08 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f8cf 	bl	8001ba4 <HCD_HC_IN_IRQHandler>
 8001a06:	e005      	b.n	8001a14 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fc5f 	bl	80022d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3d4      	bcc.n	80019ce <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f928 	bl	8005c88 <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d101      	bne.n	8001a46 <HAL_HCD_IRQHandler+0x1d6>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_HCD_IRQHandler+0x1d8>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d014      	beq.n	8001a76 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0210 	bic.w	r2, r2, #16
 8001a5a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 ffad 	bl	80029bc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0210 	orr.w	r2, r2, #16
 8001a70:	619a      	str	r2, [r3, #24]
 8001a72:	e000      	b.n	8001a76 <HAL_HCD_IRQHandler+0x206>
      return;
 8001a74:	bf00      	nop
    }
  }
}
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_HCD_Start+0x16>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e013      	b.n	8001aba <HAL_HCD_Start+0x3e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 ffff 	bl	8005aa2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fa62 	bl	8005f74 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_HCD_Stop+0x16>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00d      	b.n	8001af4 <HAL_HCD_Stop+0x32>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fe41 	bl	800676c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 fa09 	bl	8005f20 <USB_ResetPort>
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b24:	78fa      	ldrb	r2, [r7, #3]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	335c      	adds	r3, #92	; 0x5c
 8001b34:	781b      	ldrb	r3, [r3, #0]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	334c      	adds	r3, #76	; 0x4c
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fa4b 	bl	8006014 <USB_GetCurrentFrame>
 8001b7e:	4603      	mov	r3, r0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 fa26 	bl	8005fe6 <USB_GetHostSpeed>
 8001b9a:	4603      	mov	r3, r0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d119      	bne.n	8001c08 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be0:	461a      	mov	r2, r3
 8001be2:	2304      	movs	r3, #4
 8001be4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	0151      	lsls	r1, r2, #5
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	440a      	add	r2, r1
 8001bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	60d3      	str	r3, [r2, #12]
 8001c06:	e095      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d109      	bne.n	8001c32 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	6093      	str	r3, [r2, #8]
 8001c30:	e080      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d134      	bne.n	8001cb2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	0151      	lsls	r1, r2, #5
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	440a      	add	r2, r1
 8001c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	440b      	add	r3, r1
 8001c76:	335d      	adds	r3, #93	; 0x5d
 8001c78:	2205      	movs	r2, #5
 8001c7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	015a      	lsls	r2, r3, #5
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fc23 	bl	80064f6 <USB_HC_Halt>
 8001cb0:	e040      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc8:	d134      	bne.n	8001d34 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	0151      	lsls	r1, r2, #5
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	440a      	add	r2, r1
 8001ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fbfe 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d06:	461a      	mov	r2, r3
 8001d08:	2310      	movs	r3, #16
 8001d0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	335d      	adds	r3, #93	; 0x5d
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d32:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d122      	bne.n	8001d92 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	0151      	lsls	r1, r2, #5
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	440a      	add	r2, r1
 8001d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 fbbd 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001d90:	e29b      	b.n	80022ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	f040 80c1 	bne.w	8001f2c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01b      	beq.n	8001dea <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3348      	adds	r3, #72	; 0x48
 8001dc2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	0159      	lsls	r1, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dd6:	1ad1      	subs	r1, r2, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4403      	add	r3, r0
 8001de6:	334c      	adds	r3, #76	; 0x4c
 8001de8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	335d      	adds	r3, #93	; 0x5d
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3358      	adds	r3, #88	; 0x58
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2301      	movs	r3, #1
 8001e22:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	333f      	adds	r3, #63	; 0x3f
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	333f      	adds	r3, #63	; 0x3f
 8001e4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d121      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	0151      	lsls	r1, r2, #5
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	440a      	add	r2, r1
 8001e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 fb3b 	bl	80064f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2310      	movs	r3, #16
 8001e90:	6093      	str	r3, [r2, #8]
 8001e92:	e034      	b.n	8001efe <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	333f      	adds	r3, #63	; 0x3f
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d129      	bne.n	8001efe <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	0151      	lsls	r1, r2, #5
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ec8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	335c      	adds	r3, #92	; 0x5c
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	b2d8      	uxtb	r0, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	335c      	adds	r3, #92	; 0x5c
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4601      	mov	r1, r0
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 f9f3 	bl	80092e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3350      	adds	r3, #80	; 0x50
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3350      	adds	r3, #80	; 0x50
 8001f26:	4602      	mov	r2, r0
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	e1ce      	b.n	80022ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	f040 80f1 	bne.w	8002126 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	0151      	lsls	r1, r2, #5
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	440a      	add	r2, r1
 8001f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	335d      	adds	r3, #93	; 0x5d
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10a      	bne.n	8001f90 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	335c      	adds	r3, #92	; 0x5c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e0b0      	b.n	80020f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	335d      	adds	r3, #93	; 0x5d
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d10a      	bne.n	8001fbc <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	335c      	adds	r3, #92	; 0x5c
 8001fb6:	2205      	movs	r2, #5
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e09a      	b.n	80020f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	335d      	adds	r3, #93	; 0x5d
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d00a      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	335d      	adds	r3, #93	; 0x5d
 8001fe2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d156      	bne.n	8002096 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3358      	adds	r3, #88	; 0x58
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4403      	add	r3, r0
 800200a:	3358      	adds	r3, #88	; 0x58
 800200c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	3358      	adds	r3, #88	; 0x58
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d914      	bls.n	800204e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3358      	adds	r3, #88	; 0x58
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	335c      	adds	r3, #92	; 0x5c
 8002048:	2204      	movs	r2, #4
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e009      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	335c      	adds	r3, #92	; 0x5c
 800205e:	2202      	movs	r2, #2
 8002060:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002078:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002080:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e02d      	b.n	80020f2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	335d      	adds	r3, #93	; 0x5d
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d122      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	335c      	adds	r3, #92	; 0x5c
 80020bc:	2202      	movs	r2, #2
 80020be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	2302      	movs	r3, #2
 8002102:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	b2d8      	uxtb	r0, r3
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	335c      	adds	r3, #92	; 0x5c
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4601      	mov	r1, r0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f007 f8e0 	bl	80092e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002124:	e0d1      	b.n	80022ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d13e      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	0151      	lsls	r1, r2, #5
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	440a      	add	r2, r1
 8002152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3358      	adds	r3, #88	; 0x58
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4403      	add	r3, r0
 800217e:	3358      	adds	r3, #88	; 0x58
 8002180:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	335d      	adds	r3, #93	; 0x5d
 8002192:	2206      	movs	r2, #6
 8002194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f004 f9a8 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	461a      	mov	r2, r3
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	6093      	str	r3, [r2, #8]
}
 80021b8:	e087      	b.n	80022ca <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d17c      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	333f      	adds	r3, #63	; 0x3f
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d122      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3358      	adds	r3, #88	; 0x58
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	0151      	lsls	r1, r2, #5
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	440a      	add	r2, r1
 8002210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f004 f966 	bl	80064f6 <USB_HC_Halt>
 800222a:	e045      	b.n	80022b8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	333f      	adds	r3, #63	; 0x3f
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	333f      	adds	r3, #63	; 0x3f
 8002252:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002254:	2b02      	cmp	r3, #2
 8002256:	d12f      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3358      	adds	r3, #88	; 0x58
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d121      	bne.n	80022b8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	335d      	adds	r3, #93	; 0x5d
 8002284:	2203      	movs	r2, #3
 8002286:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	0151      	lsls	r1, r2, #5
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	440a      	add	r2, r1
 800229e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 f91f 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	461a      	mov	r2, r3
 80022c6:	2310      	movs	r3, #16
 80022c8:	6093      	str	r3, [r2, #8]
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d119      	bne.n	8002336 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	461a      	mov	r2, r3
 8002310:	2304      	movs	r3, #4
 8002312:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	0151      	lsls	r1, r2, #5
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	440a      	add	r2, r1
 800232a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002334:	e33e      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b20      	cmp	r3, #32
 800234a:	d141      	bne.n	80023d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	2320      	movs	r3, #32
 800235c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	333d      	adds	r3, #61	; 0x3d
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 831f 	bne.w	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	333d      	adds	r3, #61	; 0x3d
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	335c      	adds	r3, #92	; 0x5c
 800239a:	2202      	movs	r2, #2
 800239c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 f894 	bl	80064f6 <USB_HC_Halt>
}
 80023ce:	e2f1      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d13f      	bne.n	8002466 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	335d      	adds	r3, #93	; 0x5d
 80023f6:	2204      	movs	r2, #4
 80023f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	333d      	adds	r3, #61	; 0x3d
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	3358      	adds	r3, #88	; 0x58
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	0151      	lsls	r1, r2, #5
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	440a      	add	r2, r1
 8002438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f004 f852 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	461a      	mov	r2, r3
 8002460:	2340      	movs	r3, #64	; 0x40
 8002462:	6093      	str	r3, [r2, #8]
}
 8002464:	e2a6      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d122      	bne.n	80024c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	0151      	lsls	r1, r2, #5
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	440a      	add	r2, r1
 8002494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f004 f824 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	461a      	mov	r2, r3
 80024bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c0:	6093      	str	r3, [r2, #8]
}
 80024c2:	e277      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d135      	bne.n	8002546 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	440b      	add	r3, r1
 80024e8:	3358      	adds	r3, #88	; 0x58
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	440a      	add	r2, r1
 8002504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f003 ffec 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	015a      	lsls	r2, r3, #5
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	461a      	mov	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	335d      	adds	r3, #93	; 0x5d
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
}
 8002544:	e236      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d12b      	bne.n	80025b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2308      	movs	r3, #8
 800256c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	0151      	lsls	r1, r2, #5
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	440a      	add	r2, r1
 8002584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f003 ffac 	bl	80064f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	335d      	adds	r3, #93	; 0x5d
 80025ae:	2205      	movs	r2, #5
 80025b0:	701a      	strb	r2, [r3, #0]
}
 80025b2:	e1ff      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b10      	cmp	r3, #16
 80025c8:	d155      	bne.n	8002676 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3358      	adds	r3, #88	; 0x58
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	335d      	adds	r3, #93	; 0x5d
 80025ee:	2203      	movs	r2, #3
 80025f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	333d      	adds	r3, #61	; 0x3d
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d114      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	333d      	adds	r3, #61	; 0x3d
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	0151      	lsls	r1, r2, #5
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	440a      	add	r2, r1
 8002648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 ff4a 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	2310      	movs	r3, #16
 8002672:	6093      	str	r3, [r2, #8]
}
 8002674:	e19e      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d12b      	bne.n	80026e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 ff1d 	bl	80064f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	335d      	adds	r3, #93	; 0x5d
 80026cc:	2206      	movs	r2, #6
 80026ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	6093      	str	r3, [r2, #8]
}
 80026e2:	e167      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d135      	bne.n	8002768 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	0151      	lsls	r1, r2, #5
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	440a      	add	r2, r1
 8002712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fee5 	bl	80064f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	461a      	mov	r2, r3
 800273a:	2310      	movs	r3, #16
 800273c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	461a      	mov	r2, r3
 800274c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002750:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	335d      	adds	r3, #93	; 0x5d
 8002762:	2208      	movs	r2, #8
 8002764:	701a      	strb	r2, [r3, #0]
}
 8002766:	e125      	b.n	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	f040 811a 	bne.w	80029b4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	440a      	add	r2, r1
 8002796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279a:	f023 0302 	bic.w	r3, r3, #2
 800279e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335d      	adds	r3, #93	; 0x5d
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d137      	bne.n	8002826 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	335c      	adds	r3, #92	; 0x5c
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	333f      	adds	r3, #63	; 0x3f
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d00b      	beq.n	80027f8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	333f      	adds	r3, #63	; 0x3f
 80027f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	f040 80c5 	bne.w	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	3351      	adds	r3, #81	; 0x51
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f083 0301 	eor.w	r3, r3, #1
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3351      	adds	r3, #81	; 0x51
 8002820:	4602      	mov	r2, r0
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	e0ad      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	335d      	adds	r3, #93	; 0x5d
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d10a      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e097      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	335d      	adds	r3, #93	; 0x5d
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b04      	cmp	r3, #4
 8002866:	d10a      	bne.n	800287e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	335c      	adds	r3, #92	; 0x5c
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e081      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	335d      	adds	r3, #93	; 0x5d
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10a      	bne.n	80028aa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	335c      	adds	r3, #92	; 0x5c
 80028a4:	2205      	movs	r2, #5
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e06b      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	335d      	adds	r3, #93	; 0x5d
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b06      	cmp	r3, #6
 80028be:	d00a      	beq.n	80028d6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	335d      	adds	r3, #93	; 0x5d
 80028d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d155      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	3358      	adds	r3, #88	; 0x58
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	1c59      	adds	r1, r3, #1
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4403      	add	r3, r0
 80028f8:	3358      	adds	r3, #88	; 0x58
 80028fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	3358      	adds	r3, #88	; 0x58
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d914      	bls.n	800293c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3358      	adds	r3, #88	; 0x58
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	335c      	adds	r3, #92	; 0x5c
 8002936:	2204      	movs	r2, #4
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e009      	b.n	8002950 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	335c      	adds	r3, #92	; 0x5c
 800294c:	2202      	movs	r2, #2
 800294e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002966:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2302      	movs	r3, #2
 8002992:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	b2d8      	uxtb	r0, r3
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4601      	mov	r1, r0
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f006 fc98 	bl	80092e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029b4:	bf00      	nop
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	0c5b      	lsrs	r3, r3, #17
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d003      	beq.n	8002a00 <HCD_RXQLVL_IRQHandler+0x44>
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	f000 8082 	beq.w	8002b02 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80029fe:	e083      	b.n	8002b08 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d07f      	beq.n	8002b06 <HCD_RXQLVL_IRQHandler+0x14a>
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	3344      	adds	r3, #68	; 0x44
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d074      	beq.n	8002b06 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3344      	adds	r3, #68	; 0x44
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	b292      	uxth	r2, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f003 f8fd 	bl	8005c36 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	3344      	adds	r3, #68	; 0x44
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	18d1      	adds	r1, r2, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4403      	add	r3, r0
 8002a60:	3344      	adds	r3, #68	; 0x44
 8002a62:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	334c      	adds	r3, #76	; 0x4c
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	18d1      	adds	r1, r2, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4403      	add	r3, r0
 8002a88:	334c      	adds	r3, #76	; 0x4c
 8002a8a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <HCD_RXQLVL_IRQHandler+0x154>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d031      	beq.n	8002b06 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3350      	adds	r3, #80	; 0x50
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2d8      	uxtb	r0, r3
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3350      	adds	r3, #80	; 0x50
 8002afc:	4602      	mov	r2, r0
 8002afe:	701a      	strb	r2, [r3, #0]
      break;
 8002b00:	e001      	b.n	8002b06 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002b06:	bf00      	nop
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	1ff80000 	.word	0x1ff80000

08002b14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d113      	bne.n	8002b74 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10a      	bne.n	8002b6c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b64:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f006 fba0 	bl	80092ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d147      	bne.n	8002c0e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f043 0308 	orr.w	r3, r3, #8
 8002b84:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d129      	bne.n	8002be4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d113      	bne.n	8002bc0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba2:	d106      	bne.n	8002bb2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 f97e 	bl	8005eac <USB_InitFSLSPClkSel>
 8002bb0:	e011      	b.n	8002bd6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f977 	bl	8005eac <USB_InitFSLSPClkSel>
 8002bbe:	e00a      	b.n	8002bd6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002bd4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 fb92 	bl	8009300 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f006 fb65 	bl	80092ac <HAL_HCD_Connect_Callback>
 8002be2:	e014      	b.n	8002c0e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f006 fb99 	bl	800931c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002bf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002bfc:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002c0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d103      	bne.n	8002c20 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e11f      	b.n	8002e86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f006 f842 	bl	8008ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	; 0x24
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f001 f9de 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4a7b      	ldr	r2, [pc, #492]	; (8002e90 <HAL_I2C_Init+0x25c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d807      	bhi.n	8002cb8 <HAL_I2C_Init+0x84>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a7a      	ldr	r2, [pc, #488]	; (8002e94 <HAL_I2C_Init+0x260>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	e006      	b.n	8002cc6 <HAL_I2C_Init+0x92>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a77      	ldr	r2, [pc, #476]	; (8002e98 <HAL_I2C_Init+0x264>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	bf94      	ite	ls
 8002cc0:	2301      	movls	r3, #1
 8002cc2:	2300      	movhi	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0db      	b.n	8002e86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a72      	ldr	r2, [pc, #456]	; (8002e9c <HAL_I2C_Init+0x268>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a64      	ldr	r2, [pc, #400]	; (8002e90 <HAL_I2C_Init+0x25c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <HAL_I2C_Init+0xd4>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	e009      	b.n	8002d1c <HAL_I2C_Init+0xe8>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	4a63      	ldr	r2, [pc, #396]	; (8002ea0 <HAL_I2C_Init+0x26c>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4956      	ldr	r1, [pc, #344]	; (8002e90 <HAL_I2C_Init+0x25c>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d80d      	bhi.n	8002d58 <HAL_I2C_Init+0x124>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e59      	subs	r1, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	bf38      	it	cc
 8002d54:	2304      	movcc	r3, #4
 8002d56:	e04f      	b.n	8002df8 <HAL_I2C_Init+0x1c4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d111      	bne.n	8002d84 <HAL_I2C_Init+0x150>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1e58      	subs	r0, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e012      	b.n	8002daa <HAL_I2C_Init+0x176>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	0099      	lsls	r1, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Init+0x17e>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e022      	b.n	8002df8 <HAL_I2C_Init+0x1c4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10e      	bne.n	8002dd8 <HAL_I2C_Init+0x1a4>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1e58      	subs	r0, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6859      	ldr	r1, [r3, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	440b      	add	r3, r1
 8002dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd6:	e00f      	b.n	8002df8 <HAL_I2C_Init+0x1c4>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	0099      	lsls	r1, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	6809      	ldr	r1, [r1, #0]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69da      	ldr	r2, [r3, #28]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6911      	ldr	r1, [r2, #16]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	000186a0 	.word	0x000186a0
 8002e94:	001e847f 	.word	0x001e847f
 8002e98:	003d08ff 	.word	0x003d08ff
 8002e9c:	431bde83 	.word	0x431bde83
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e128      	b.n	8003108 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a90      	ldr	r2, [pc, #576]	; (8003110 <HAL_I2S_Init+0x26c>)
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f005 ff4f 	bl	8008d74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002eec:	f023 030f 	bic.w	r3, r3, #15
 8002ef0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d060      	beq.n	8002fc4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e001      	b.n	8002f14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d802      	bhi.n	8002f22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f001 f9a2 	bl	800426c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f28:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f32:	d125      	bne.n	8002f80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	461a      	mov	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	3305      	adds	r3, #5
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e01f      	b.n	8002f9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	461a      	mov	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	3305      	adds	r3, #5
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e00e      	b.n	8002f9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4a5c      	ldr	r2, [pc, #368]	; (8003114 <HAL_I2S_Init+0x270>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	08db      	lsrs	r3, r3, #3
 8002fa8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e003      	b.n	8002fcc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d902      	bls.n	8002fd8 <HAL_I2S_Init+0x134>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2bff      	cmp	r3, #255	; 0xff
 8002fd6:	d907      	bls.n	8002fe8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e08f      	b.n	8003108 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	ea42 0103 	orr.w	r1, r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003006:	f023 030f 	bic.w	r3, r3, #15
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6851      	ldr	r1, [r2, #4]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68d2      	ldr	r2, [r2, #12]
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6992      	ldr	r2, [r2, #24]
 800301e:	430a      	orrs	r2, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d161      	bne.n	80030f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <HAL_I2S_Init+0x274>)
 8003038:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_I2S_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_I2S_Init+0x1a4>
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <HAL_I2S_Init+0x27c>)
 8003046:	e001      	b.n	800304c <HAL_I2S_Init+0x1a8>
 8003048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	4932      	ldr	r1, [pc, #200]	; (800311c <HAL_I2S_Init+0x278>)
 8003054:	428a      	cmp	r2, r1
 8003056:	d101      	bne.n	800305c <HAL_I2S_Init+0x1b8>
 8003058:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_I2S_Init+0x27c>)
 800305a:	e001      	b.n	8003060 <HAL_I2S_Init+0x1bc>
 800305c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003060:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003064:	f023 030f 	bic.w	r3, r3, #15
 8003068:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_I2S_Init+0x278>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_I2S_Init+0x1d4>
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_I2S_Init+0x27c>)
 8003076:	e001      	b.n	800307c <HAL_I2S_Init+0x1d8>
 8003078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307c:	2202      	movs	r2, #2
 800307e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <HAL_I2S_Init+0x278>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_I2S_Init+0x1ea>
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_I2S_Init+0x27c>)
 800308c:	e001      	b.n	8003092 <HAL_I2S_Init+0x1ee>
 800308e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309e:	d003      	beq.n	80030a8 <HAL_I2S_Init+0x204>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e001      	b.n	80030b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	b299      	uxth	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80030ca:	4303      	orrs	r3, r0
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	430b      	orrs	r3, r1
 80030d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	897b      	ldrh	r3, [r7, #10]
 80030d8:	4313      	orrs	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_I2S_Init+0x278>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_I2S_Init+0x24c>
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_I2S_Init+0x27c>)
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x250>
 80030f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f4:	897a      	ldrh	r2, [r7, #10]
 80030f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	0800321b 	.word	0x0800321b
 8003114:	cccccccd 	.word	0xcccccccd
 8003118:	08003331 	.word	0x08003331
 800311c:	40003800 	.word	0x40003800
 8003120:	40003400 	.word	0x40003400

08003124 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffb8 	bl	8003124 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	b292      	uxth	r2, r2
 80031d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10e      	bne.n	8003212 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003202:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff93 	bl	8003138 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b04      	cmp	r3, #4
 8003234:	d13a      	bne.n	80032ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d109      	bne.n	8003254 <I2S_IRQHandler+0x3a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	2b40      	cmp	r3, #64	; 0x40
 800324c:	d102      	bne.n	8003254 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ffb4 	bl	80031bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d126      	bne.n	80032ac <I2S_IRQHandler+0x92>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b20      	cmp	r3, #32
 800326a:	d11f      	bne.n	80032ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800327a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ff50 	bl	800314c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d136      	bne.n	8003326 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d109      	bne.n	80032d6 <I2S_IRQHandler+0xbc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d102      	bne.n	80032d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff45 	bl	8003160 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d122      	bne.n	8003326 <I2S_IRQHandler+0x10c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d11b      	bne.n	8003326 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff13 	bl	800314c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4aa2      	ldr	r2, [pc, #648]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800334a:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800334c:	e001      	b.n	8003352 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800334e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a9b      	ldr	r2, [pc, #620]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003368:	4b9a      	ldr	r3, [pc, #616]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800336a:	e001      	b.n	8003370 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800336c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d004      	beq.n	8003388 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 8099 	bne.w	80034ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d107      	bne.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f925 	bl	80035ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9c8 	bl	800374c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d13a      	bne.n	800343c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d035      	beq.n	800343c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a7e      	ldr	r2, [pc, #504]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d101      	bne.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033da:	4b7e      	ldr	r3, [pc, #504]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033dc:	e001      	b.n	80033e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4979      	ldr	r1, [pc, #484]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80033ea:	428b      	cmp	r3, r1
 80033ec:	d101      	bne.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033ee:	4b79      	ldr	r3, [pc, #484]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80033f0:	e001      	b.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fe88 	bl	800314c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b08      	cmp	r3, #8
 8003444:	f040 80be 	bne.w	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80b8 	beq.w	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003462:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a59      	ldr	r2, [pc, #356]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800346e:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003470:	e001      	b.n	8003476 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4954      	ldr	r1, [pc, #336]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800347e:	428b      	cmp	r3, r1
 8003480:	d101      	bne.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003482:	4b54      	ldr	r3, [pc, #336]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003484:	e001      	b.n	800348a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003486:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fe4a 	bl	800314c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034b8:	e084      	b.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8be 	bl	8003650 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8fd 	bl	80036e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d12f      	bne.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02a      	beq.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003510:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2e      	ldr	r2, [pc, #184]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800351e:	e001      	b.n	8003524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4929      	ldr	r1, [pc, #164]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800352c:	428b      	cmp	r3, r1
 800352e:	d101      	bne.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003532:	e001      	b.n	8003538 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fdfa 	bl	800314c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d131      	bne.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d02c      	beq.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a17      	ldr	r2, [pc, #92]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003578:	e001      	b.n	800357e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4912      	ldr	r1, [pc, #72]	; (80035d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003586:	428b      	cmp	r3, r1
 8003588:	d101      	bne.n	800358e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800358c:	e001      	b.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800358e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003592:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003596:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fdc5 	bl	800314c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035c2:	e000      	b.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035c4:	bf00      	nop
}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40003800 	.word	0x40003800
 80035d4:	40003400 	.word	0x40003400

080035d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c99      	adds	r1, r3, #2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6251      	str	r1, [r2, #36]	; 0x24
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d113      	bne.n	8003646 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800362c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffc9 	bl	80035d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c99      	adds	r1, r3, #2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6251      	str	r1, [r2, #36]	; 0x24
 8003662:	8819      	ldrh	r1, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <I2SEx_TxISR_I2SExt+0x90>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <I2SEx_TxISR_I2SExt+0x22>
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <I2SEx_TxISR_I2SExt+0x94>)
 8003670:	e001      	b.n	8003676 <I2SEx_TxISR_I2SExt+0x26>
 8003672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003676:	460a      	mov	r2, r1
 8003678:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d121      	bne.n	80036d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <I2SEx_TxISR_I2SExt+0x90>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <I2SEx_TxISR_I2SExt+0x50>
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <I2SEx_TxISR_I2SExt+0x94>)
 800369e:	e001      	b.n	80036a4 <I2SEx_TxISR_I2SExt+0x54>
 80036a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	490d      	ldr	r1, [pc, #52]	; (80036e0 <I2SEx_TxISR_I2SExt+0x90>)
 80036ac:	428b      	cmp	r3, r1
 80036ae:	d101      	bne.n	80036b4 <I2SEx_TxISR_I2SExt+0x64>
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <I2SEx_TxISR_I2SExt+0x94>)
 80036b2:	e001      	b.n	80036b8 <I2SEx_TxISR_I2SExt+0x68>
 80036b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff81 	bl	80035d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40003800 	.word	0x40003800
 80036e4:	40003400 	.word	0x40003400

080036e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68d8      	ldr	r0, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	1c99      	adds	r1, r3, #2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003700:	b282      	uxth	r2, r0
 8003702:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d113      	bne.n	8003744 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800372a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff4a 	bl	80035d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <I2SEx_RxISR_I2SExt+0x90>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <I2SEx_RxISR_I2SExt+0x16>
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <I2SEx_RxISR_I2SExt+0x94>)
 8003760:	e001      	b.n	8003766 <I2SEx_RxISR_I2SExt+0x1a>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	68d8      	ldr	r0, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	1c99      	adds	r1, r3, #2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003772:	b282      	uxth	r2, r0
 8003774:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d121      	bne.n	80037d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <I2SEx_RxISR_I2SExt+0x90>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <I2SEx_RxISR_I2SExt+0x50>
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <I2SEx_RxISR_I2SExt+0x94>)
 800379a:	e001      	b.n	80037a0 <I2SEx_RxISR_I2SExt+0x54>
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	490d      	ldr	r1, [pc, #52]	; (80037dc <I2SEx_RxISR_I2SExt+0x90>)
 80037a8:	428b      	cmp	r3, r1
 80037aa:	d101      	bne.n	80037b0 <I2SEx_RxISR_I2SExt+0x64>
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <I2SEx_RxISR_I2SExt+0x94>)
 80037ae:	e001      	b.n	80037b4 <I2SEx_RxISR_I2SExt+0x68>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff03 	bl	80035d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40003800 	.word	0x40003800
 80037e0:	40003400 	.word	0x40003400

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e25b      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d075      	beq.n	80038ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003802:	4ba3      	ldr	r3, [pc, #652]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d00c      	beq.n	8003828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4ba0      	ldr	r3, [pc, #640]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003816:	2b08      	cmp	r3, #8
 8003818:	d112      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b9d      	ldr	r3, [pc, #628]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003826:	d10b      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	4b99      	ldr	r3, [pc, #612]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05b      	beq.n	80038ec <HAL_RCC_OscConfig+0x108>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d157      	bne.n	80038ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e236      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x74>
 800384a:	4b91      	ldr	r3, [pc, #580]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a90      	ldr	r2, [pc, #576]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e01d      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a8a      	ldr	r2, [pc, #552]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b88      	ldr	r3, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a87      	ldr	r2, [pc, #540]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 800387c:	4b84      	ldr	r3, [pc, #528]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a83      	ldr	r2, [pc, #524]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fc fe82 	bl	80005a4 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fc fe7e 	bl	80005a4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1fb      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0xc0>
 80038c2:	e014      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fc fe6e 	bl	80005a4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fc fe6a 	bl	80005a4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1e7      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0xe8>
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d063      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b62      	ldr	r3, [pc, #392]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800390e:	2b08      	cmp	r3, #8
 8003910:	d11c      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e1bb      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b56      	ldr	r3, [pc, #344]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4952      	ldr	r1, [pc, #328]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	e03a      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003954:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_OscConfig+0x2b0>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fc fe23 	bl	80005a4 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003962:	f7fc fe1f 	bl	80005a4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e19c      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4940      	ldr	r1, [pc, #256]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_OscConfig+0x2b0>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fc fe02 	bl	80005a4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fc fdfe 	bl	80005a4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e17b      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d030      	beq.n	8003a30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_RCC_OscConfig+0x2b4>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fc fde2 	bl	80005a4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fc fdde 	bl	80005a4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e15b      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x200>
 8003a02:	e015      	b.n	8003a30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x2b4>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fc fdcb 	bl	80005a4 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fc fdc7 	bl	80005a4 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e144      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a0 	beq.w	8003b7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_OscConfig+0x2b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d121      	bne.n	8003abe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x2b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_OscConfig+0x2b8>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a86:	f7fc fd8d 	bl	80005a4 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	e011      	b.n	8003ab2 <HAL_RCC_OscConfig+0x2ce>
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	42470000 	.word	0x42470000
 8003a98:	42470e80 	.word	0x42470e80
 8003a9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fc fd80 	bl	80005a4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0fd      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCC_OscConfig+0x4d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x2f0>
 8003ac6:	4b7d      	ldr	r3, [pc, #500]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a7c      	ldr	r2, [pc, #496]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	e01c      	b.n	8003b0e <HAL_RCC_OscConfig+0x32a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	d10c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x312>
 8003adc:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae0:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	4a73      	ldr	r2, [pc, #460]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	; 0x70
 8003af4:	e00b      	b.n	8003b0e <HAL_RCC_OscConfig+0x32a>
 8003af6:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	4a70      	ldr	r2, [pc, #448]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4a6d      	ldr	r2, [pc, #436]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b08:	f023 0304 	bic.w	r3, r3, #4
 8003b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d015      	beq.n	8003b42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fc fd45 	bl	80005a4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b1e:	f7fc fd41 	bl	80005a4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e0bc      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	4b61      	ldr	r3, [pc, #388]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ee      	beq.n	8003b1e <HAL_RCC_OscConfig+0x33a>
 8003b40:	e014      	b.n	8003b6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b42:	f7fc fd2f 	bl	80005a4 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7fc fd2b 	bl	80005a4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0a6      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ee      	bne.n	8003b4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b72:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a51      	ldr	r2, [pc, #324]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8092 	beq.w	8003cac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b88:	4b4c      	ldr	r3, [pc, #304]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d05c      	beq.n	8003c4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d141      	bne.n	8003c20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9c:	4b48      	ldr	r3, [pc, #288]	; (8003cc0 <HAL_RCC_OscConfig+0x4dc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fc fcff 	bl	80005a4 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003baa:	f7fc fcfb 	bl	80005a4 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e078      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f0      	bne.n	8003baa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	019b      	lsls	r3, r3, #6
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	041b      	lsls	r3, r3, #16
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	061b      	lsls	r3, r3, #24
 8003bec:	4933      	ldr	r1, [pc, #204]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fc fcd4 	bl	80005a4 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fc fcd0 	bl	80005a4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e04d      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x41c>
 8003c1e:	e045      	b.n	8003cac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_OscConfig+0x4dc>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fc fcbd 	bl	80005a4 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7fc fcb9 	bl	80005a4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e036      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f0      	bne.n	8003c2e <HAL_RCC_OscConfig+0x44a>
 8003c4c:	e02e      	b.n	8003cac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e029      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c5a:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d115      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40007000 	.word	0x40007000
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470060 	.word	0x42470060

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0cc      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90c      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0b8      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d30:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a52      	ldr	r2, [pc, #328]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b50      	ldr	r3, [pc, #320]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	494d      	ldr	r1, [pc, #308]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d044      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d119      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e067      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da2:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4934      	ldr	r1, [pc, #208]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db4:	f7fc fbf6 	bl	80005a4 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbc:	f7fc fbf2 	bl	80005a4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e04f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 020c 	and.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1eb      	bne.n	8003dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d20c      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e032      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	490e      	ldr	r1, [pc, #56]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4a:	f000 f821 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4601      	mov	r1, r0
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	5cd3      	ldrb	r3, [r2, r3]
 8003e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb56 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023c00 	.word	0x40023c00
 8003e80:	40023800 	.word	0x40023800
 8003e84:	080099a8 	.word	0x080099a8
 8003e88:	20000028 	.word	0x20000028
 8003e8c:	20000000 	.word	0x20000000

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea6:	4b63      	ldr	r3, [pc, #396]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d007      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x32>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d008      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x38>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f040 80b4 	bne.w	8004024 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ebe:	60bb      	str	r3, [r7, #8]
       break;
 8003ec0:	e0b3      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ec2:	4b5e      	ldr	r3, [pc, #376]	; (800403c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003ec4:	60bb      	str	r3, [r7, #8]
      break;
 8003ec6:	e0b0      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec8:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed2:	4b58      	ldr	r3, [pc, #352]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d04a      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ede:	4b55      	ldr	r3, [pc, #340]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	f04f 0400 	mov.w	r4, #0
 8003ee8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	ea03 0501 	and.w	r5, r3, r1
 8003ef4:	ea04 0602 	and.w	r6, r4, r2
 8003ef8:	4629      	mov	r1, r5
 8003efa:	4632      	mov	r2, r6
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	f04f 0400 	mov.w	r4, #0
 8003f04:	0154      	lsls	r4, r2, #5
 8003f06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f0a:	014b      	lsls	r3, r1, #5
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4622      	mov	r2, r4
 8003f10:	1b49      	subs	r1, r1, r5
 8003f12:	eb62 0206 	sbc.w	r2, r2, r6
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	f04f 0400 	mov.w	r4, #0
 8003f1e:	0194      	lsls	r4, r2, #6
 8003f20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f24:	018b      	lsls	r3, r1, #6
 8003f26:	1a5b      	subs	r3, r3, r1
 8003f28:	eb64 0402 	sbc.w	r4, r4, r2
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	00e2      	lsls	r2, r4, #3
 8003f36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f3a:	00d9      	lsls	r1, r3, #3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	195b      	adds	r3, r3, r5
 8003f42:	eb44 0406 	adc.w	r4, r4, r6
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	0262      	lsls	r2, r4, #9
 8003f50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f54:	0259      	lsls	r1, r3, #9
 8003f56:	460b      	mov	r3, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	f7fc f936 	bl	80001d8 <__aeabi_uldivmod>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e049      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f74:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	f04f 0400 	mov.w	r4, #0
 8003f7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	ea03 0501 	and.w	r5, r3, r1
 8003f8a:	ea04 0602 	and.w	r6, r4, r2
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4632      	mov	r2, r6
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	f04f 0400 	mov.w	r4, #0
 8003f9a:	0154      	lsls	r4, r2, #5
 8003f9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fa0:	014b      	lsls	r3, r1, #5
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	1b49      	subs	r1, r1, r5
 8003fa8:	eb62 0206 	sbc.w	r2, r2, r6
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	f04f 0400 	mov.w	r4, #0
 8003fb4:	0194      	lsls	r4, r2, #6
 8003fb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fba:	018b      	lsls	r3, r1, #6
 8003fbc:	1a5b      	subs	r3, r3, r1
 8003fbe:	eb64 0402 	sbc.w	r4, r4, r2
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fd0:	00d9      	lsls	r1, r3, #3
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	195b      	adds	r3, r3, r5
 8003fd8:	eb44 0406 	adc.w	r4, r4, r6
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	02a2      	lsls	r2, r4, #10
 8003fe6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fea:	0299      	lsls	r1, r3, #10
 8003fec:	460b      	mov	r3, r1
 8003fee:	4614      	mov	r4, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f04f 0400 	mov.w	r4, #0
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	f7fc f8eb 	bl	80001d8 <__aeabi_uldivmod>
 8004002:	4603      	mov	r3, r0
 8004004:	460c      	mov	r4, r1
 8004006:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	60bb      	str	r3, [r7, #8]
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004026:	60bb      	str	r3, [r7, #8]
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	68bb      	ldr	r3, [r7, #8]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004034:	40023800 	.word	0x40023800
 8004038:	00f42400 	.word	0x00f42400
 800403c:	007a1200 	.word	0x007a1200

08004040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004044:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_GetHCLKFreq+0x14>)
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000028 	.word	0x20000028

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800405c:	f7ff fff0 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004060:	4601      	mov	r1, r0
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0a9b      	lsrs	r3, r3, #10
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4a03      	ldr	r2, [pc, #12]	; (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	080099b8 	.word	0x080099b8

08004080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004084:	f7ff ffdc 	bl	8004040 <HAL_RCC_GetHCLKFreq>
 8004088:	4601      	mov	r1, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	0b5b      	lsrs	r3, r3, #13
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4a03      	ldr	r2, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	080099b8 	.word	0x080099b8

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d035      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040d0:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d6:	f7fc fa65 	bl	80005a4 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040de:	f7fc fa61 	bl	80005a4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0b0      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f0:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	019a      	lsls	r2, r3, #6
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	071b      	lsls	r3, r3, #28
 8004108:	4955      	ldr	r1, [pc, #340]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004110:	4b52      	ldr	r3, [pc, #328]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004116:	f7fc fa45 	bl	80005a4 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800411e:	f7fc fa41 	bl	80005a4 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e090      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004130:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8083 	beq.w	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a43      	ldr	r2, [pc, #268]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3e      	ldr	r2, [pc, #248]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800416c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004170:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004172:	f7fc fa17 	bl	80005a4 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800417a:	f7fc fa13 	bl	80005a4 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e062      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800418c:	4b35      	ldr	r3, [pc, #212]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d028      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c6:	4b28      	ldr	r3, [pc, #160]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d114      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041de:	f7fc f9e1 	bl	80005a4 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fc f9dd 	bl	80005a4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e02a      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b18      	ldr	r3, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	d10d      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	490d      	ldr	r1, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]
 8004230:	e005      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800423c:	6093      	str	r3, [r2, #8]
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004240:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	4905      	ldr	r1, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	42470068 	.word	0x42470068
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000
 8004268:	42470e40 	.word	0x42470e40

0800426c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d13d      	bne.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004292:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12f      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800429e:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042a0:	617b      	str	r3, [r7, #20]
          break;
 80042a2:	e02f      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d108      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e007      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042da:	099b      	lsrs	r3, r3, #6
 80042dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	0f1b      	lsrs	r3, r3, #28
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
          break;
 80042fc:	e002      	b.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
          break;
 8004302:	bf00      	nop
        }
      }
      break;
 8004304:	bf00      	nop
    }
  }
  return frequency;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40023800 	.word	0x40023800
 8004318:	00bb8000 	.word	0x00bb8000
 800431c:	007a1200 	.word	0x007a1200
 8004320:	00f42400 	.word	0x00f42400

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e056      	b.n	80043e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f004 fd77 	bl	8008e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2202      	movs	r2, #2
 800435a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	ea42 0103 	orr.w	r1, r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	0c1b      	lsrs	r3, r3, #16
 80043b4:	f003 0104 	and.w	r1, r3, #4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e01d      	b.n	800443a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f004 fd5e 	bl	8008ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 f9fa 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e01d      	b.n	8004490 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f815 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f000 f9cf 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fc9a 	bl	8004df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <HAL_TIM_PWM_Start+0x74>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIM_PWM_Start+0x2c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a14      	ldr	r2, [pc, #80]	; (8004524 <HAL_TIM_PWM_Start+0x78>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_TIM_PWM_Start+0x30>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_TIM_PWM_Start+0x32>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d007      	beq.n	8004514 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40010400 	.word	0x40010400

08004528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800453e:	2302      	movs	r3, #2
 8004540:	e0b4      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b0c      	cmp	r3, #12
 8004556:	f200 809f 	bhi.w	8004698 <HAL_TIM_PWM_ConfigChannel+0x170>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004595 	.word	0x08004595
 8004564:	08004699 	.word	0x08004699
 8004568:	08004699 	.word	0x08004699
 800456c:	08004699 	.word	0x08004699
 8004570:	080045d5 	.word	0x080045d5
 8004574:	08004699 	.word	0x08004699
 8004578:	08004699 	.word	0x08004699
 800457c:	08004699 	.word	0x08004699
 8004580:	08004617 	.word	0x08004617
 8004584:	08004699 	.word	0x08004699
 8004588:	08004699 	.word	0x08004699
 800458c:	08004699 	.word	0x08004699
 8004590:	08004657 	.word	0x08004657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f9e2 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0208 	orr.w	r2, r2, #8
 80045ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6999      	ldr	r1, [r3, #24]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	619a      	str	r2, [r3, #24]
      break;
 80045d2:	e062      	b.n	800469a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fa32 	bl	8004a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	619a      	str	r2, [r3, #24]
      break;
 8004614:	e041      	b.n	800469a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fa87 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0208 	orr.w	r2, r2, #8
 8004630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0204 	bic.w	r2, r2, #4
 8004640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69d9      	ldr	r1, [r3, #28]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	61da      	str	r2, [r3, #28]
      break;
 8004654:	e021      	b.n	800469a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fadb 	bl	8004c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	021a      	lsls	r2, r3, #8
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	61da      	str	r2, [r3, #28]
      break;
 8004696:	e000      	b.n	800469a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004698:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_ConfigClockSource+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0a6      	b.n	800481a <HAL_TIM_ConfigClockSource+0x166>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d067      	beq.n	80047d4 <HAL_TIM_ConfigClockSource+0x120>
 8004704:	2b40      	cmp	r3, #64	; 0x40
 8004706:	d80b      	bhi.n	8004720 <HAL_TIM_ConfigClockSource+0x6c>
 8004708:	2b10      	cmp	r3, #16
 800470a:	d073      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d802      	bhi.n	8004716 <HAL_TIM_ConfigClockSource+0x62>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d06f      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004714:	e078      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004716:	2b20      	cmp	r3, #32
 8004718:	d06c      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
 800471a:	2b30      	cmp	r3, #48	; 0x30
 800471c:	d06a      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800471e:	e073      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d00d      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0x8c>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d804      	bhi.n	8004732 <HAL_TIM_ConfigClockSource+0x7e>
 8004728:	2b50      	cmp	r3, #80	; 0x50
 800472a:	d033      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xe0>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d041      	beq.n	80047b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004730:	e06a      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d066      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x152>
 8004738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473c:	d017      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800473e:	e063      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f000 fb32 	bl	8004db8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004762:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e04c      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f000 fb1b 	bl	8004db8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004790:	609a      	str	r2, [r3, #8]
      break;
 8004792:	e039      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f000 fa8f 	bl	8004cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2150      	movs	r1, #80	; 0x50
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fae8 	bl	8004d82 <TIM_ITRx_SetConfig>
      break;
 80047b2:	e029      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f000 faae 	bl	8004d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2160      	movs	r1, #96	; 0x60
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fad8 	bl	8004d82 <TIM_ITRx_SetConfig>
      break;
 80047d2:	e019      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	461a      	mov	r2, r3
 80047e2:	f000 fa6f 	bl	8004cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2140      	movs	r1, #64	; 0x40
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fac8 	bl	8004d82 <TIM_ITRx_SetConfig>
      break;
 80047f2:	e009      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fabf 	bl	8004d82 <TIM_ITRx_SetConfig>
      break;
 8004804:	e000      	b.n	8004808 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a40      	ldr	r2, [pc, #256]	; (8004938 <TIM_Base_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d00f      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3d      	ldr	r2, [pc, #244]	; (800493c <TIM_Base_SetConfig+0x118>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00b      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3c      	ldr	r2, [pc, #240]	; (8004940 <TIM_Base_SetConfig+0x11c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3b      	ldr	r2, [pc, #236]	; (8004944 <TIM_Base_SetConfig+0x120>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <TIM_Base_SetConfig+0x40>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a3a      	ldr	r2, [pc, #232]	; (8004948 <TIM_Base_SetConfig+0x124>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2f      	ldr	r2, [pc, #188]	; (8004938 <TIM_Base_SetConfig+0x114>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d027      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2c      	ldr	r2, [pc, #176]	; (800493c <TIM_Base_SetConfig+0x118>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d023      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2b      	ldr	r2, [pc, #172]	; (8004940 <TIM_Base_SetConfig+0x11c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <TIM_Base_SetConfig+0x120>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a29      	ldr	r2, [pc, #164]	; (8004948 <TIM_Base_SetConfig+0x124>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d017      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a28      	ldr	r2, [pc, #160]	; (800494c <TIM_Base_SetConfig+0x128>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a27      	ldr	r2, [pc, #156]	; (8004950 <TIM_Base_SetConfig+0x12c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00f      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <TIM_Base_SetConfig+0x130>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a25      	ldr	r2, [pc, #148]	; (8004958 <TIM_Base_SetConfig+0x134>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <TIM_Base_SetConfig+0x138>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <TIM_Base_SetConfig+0x13c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d108      	bne.n	80048e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <TIM_Base_SetConfig+0x114>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0xf8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	615a      	str	r2, [r3, #20]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40010400 	.word	0x40010400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800
 8004958:	40001800 	.word	0x40001800
 800495c:	40001c00 	.word	0x40001c00
 8004960:	40002000 	.word	0x40002000

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <TIM_OC1_SetConfig+0xd8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_OC1_SetConfig+0x64>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <TIM_OC1_SetConfig+0xdc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d10c      	bne.n	80049e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0308 	bic.w	r3, r3, #8
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <TIM_OC1_SetConfig+0xd8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC1_SetConfig+0x8e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <TIM_OC1_SetConfig+0xdc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d111      	bne.n	8004a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40010000 	.word	0x40010000
 8004a40:	40010400 	.word	0x40010400

08004a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0210 	bic.w	r2, r3, #16
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0320 	bic.w	r3, r3, #32
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <TIM_OC2_SetConfig+0xe4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC2_SetConfig+0x68>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a21      	ldr	r2, [pc, #132]	; (8004b2c <TIM_OC2_SetConfig+0xe8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d10d      	bne.n	8004ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <TIM_OC2_SetConfig+0xe4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC2_SetConfig+0x94>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a16      	ldr	r2, [pc, #88]	; (8004b2c <TIM_OC2_SetConfig+0xe8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d113      	bne.n	8004b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40010400 	.word	0x40010400

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <TIM_OC3_SetConfig+0xe0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <TIM_OC3_SetConfig+0x66>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <TIM_OC3_SetConfig+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10d      	bne.n	8004bb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <TIM_OC3_SetConfig+0xe0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC3_SetConfig+0x92>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <TIM_OC3_SetConfig+0xe4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d113      	bne.n	8004bea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40010400 	.word	0x40010400

08004c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	031b      	lsls	r3, r3, #12
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <TIM_OC4_SetConfig+0xa4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_OC4_SetConfig+0x68>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <TIM_OC4_SetConfig+0xa8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0201 	bic.w	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 030a 	bic.w	r3, r3, #10
 8004d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b087      	sub	sp, #28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0210 	bic.w	r2, r3, #16
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	031b      	lsls	r3, r3, #12
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f043 0307 	orr.w	r3, r3, #7
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 031f 	and.w	r3, r3, #31
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	431a      	orrs	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e05a      	b.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d022      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d018      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00e      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a17      	ldr	r2, [pc, #92]	; (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10c      	bne.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40001800 	.word	0x40001800

08004f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e03f      	b.n	8004fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f004 f812 	bl	8008f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	; 0x24
 8004f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f9b1 	bl	80052e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b088      	sub	sp, #32
 8004fda:	af02      	add	r7, sp, #8
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	f040 8083 	bne.w	80050fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_UART_Transmit+0x2e>
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e07b      	b.n	8005100 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Transmit+0x40>
 8005012:	2302      	movs	r3, #2
 8005014:	e074      	b.n	8005100 <HAL_UART_Transmit+0x12a>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2221      	movs	r2, #33	; 0x21
 8005028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800502c:	f7fb faba 	bl	80005a4 <HAL_GetTick>
 8005030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005046:	e042      	b.n	80050ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d122      	bne.n	80050a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2200      	movs	r2, #0
 8005068:	2180      	movs	r1, #128	; 0x80
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8f2 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e042      	b.n	8005100 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	3302      	adds	r3, #2
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	e017      	b.n	80050ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	e013      	b.n	80050ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f8cf 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e01f      	b.n	8005100 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	60ba      	str	r2, [r7, #8]
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1b7      	bne.n	8005048 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	2140      	movs	r1, #64	; 0x40
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f8b6 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e006      	b.n	8005100 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	e000      	b.n	8005100 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	f040 8090 	bne.w	800524a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <HAL_UART_Receive+0x2e>
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e088      	b.n	800524c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_UART_Receive+0x40>
 8005144:	2302      	movs	r3, #2
 8005146:	e081      	b.n	800524c <HAL_UART_Receive+0x144>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2222      	movs	r2, #34	; 0x22
 800515a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800515e:	f7fb fa21 	bl	80005a4 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005178:	e05c      	b.n	8005234 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005190:	d12b      	bne.n	80051ea <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2120      	movs	r1, #32
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f859 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e04f      	b.n	800524c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10c      	bne.n	80051d2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3302      	adds	r3, #2
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	e030      	b.n	8005234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	b29a      	uxth	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	e024      	b.n	8005234 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2120      	movs	r1, #32
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f82d 	bl	8005254 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e023      	b.n	800524c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	60ba      	str	r2, [r7, #8]
 8005218:	b2ca      	uxtb	r2, r1
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e00a      	b.n	8005234 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d19d      	bne.n	800517a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005264:	e02c      	b.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d028      	beq.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x30>
 8005274:	f7fb f996 	bl	80005a4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	429a      	cmp	r2, r3
 8005282:	d21d      	bcs.n	80052c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005292:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e00f      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d0c3      	beq.n	8005266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800532a:	f023 030c 	bic.w	r3, r3, #12
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	430b      	orrs	r3, r1
 8005336:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005356:	f040 818b 	bne.w	8005670 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4ac1      	ldr	r2, [pc, #772]	; (8005664 <UART_SetConfig+0x37c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d005      	beq.n	8005370 <UART_SetConfig+0x88>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4abf      	ldr	r2, [pc, #764]	; (8005668 <UART_SetConfig+0x380>)
 800536a:	4293      	cmp	r3, r2
 800536c:	f040 80bd 	bne.w	80054ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005370:	f7fe fe86 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 8005374:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	461d      	mov	r5, r3
 800537a:	f04f 0600 	mov.w	r6, #0
 800537e:	46a8      	mov	r8, r5
 8005380:	46b1      	mov	r9, r6
 8005382:	eb18 0308 	adds.w	r3, r8, r8
 8005386:	eb49 0409 	adc.w	r4, r9, r9
 800538a:	4698      	mov	r8, r3
 800538c:	46a1      	mov	r9, r4
 800538e:	eb18 0805 	adds.w	r8, r8, r5
 8005392:	eb49 0906 	adc.w	r9, r9, r6
 8005396:	f04f 0100 	mov.w	r1, #0
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053aa:	4688      	mov	r8, r1
 80053ac:	4691      	mov	r9, r2
 80053ae:	eb18 0005 	adds.w	r0, r8, r5
 80053b2:	eb49 0106 	adc.w	r1, r9, r6
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	461d      	mov	r5, r3
 80053bc:	f04f 0600 	mov.w	r6, #0
 80053c0:	196b      	adds	r3, r5, r5
 80053c2:	eb46 0406 	adc.w	r4, r6, r6
 80053c6:	461a      	mov	r2, r3
 80053c8:	4623      	mov	r3, r4
 80053ca:	f7fa ff05 	bl	80001d8 <__aeabi_uldivmod>
 80053ce:	4603      	mov	r3, r0
 80053d0:	460c      	mov	r4, r1
 80053d2:	461a      	mov	r2, r3
 80053d4:	4ba5      	ldr	r3, [pc, #660]	; (800566c <UART_SetConfig+0x384>)
 80053d6:	fba3 2302 	umull	r2, r3, r3, r2
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	461d      	mov	r5, r3
 80053e4:	f04f 0600 	mov.w	r6, #0
 80053e8:	46a9      	mov	r9, r5
 80053ea:	46b2      	mov	sl, r6
 80053ec:	eb19 0309 	adds.w	r3, r9, r9
 80053f0:	eb4a 040a 	adc.w	r4, sl, sl
 80053f4:	4699      	mov	r9, r3
 80053f6:	46a2      	mov	sl, r4
 80053f8:	eb19 0905 	adds.w	r9, r9, r5
 80053fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8005400:	f04f 0100 	mov.w	r1, #0
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800540c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005414:	4689      	mov	r9, r1
 8005416:	4692      	mov	sl, r2
 8005418:	eb19 0005 	adds.w	r0, r9, r5
 800541c:	eb4a 0106 	adc.w	r1, sl, r6
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	461d      	mov	r5, r3
 8005426:	f04f 0600 	mov.w	r6, #0
 800542a:	196b      	adds	r3, r5, r5
 800542c:	eb46 0406 	adc.w	r4, r6, r6
 8005430:	461a      	mov	r2, r3
 8005432:	4623      	mov	r3, r4
 8005434:	f7fa fed0 	bl	80001d8 <__aeabi_uldivmod>
 8005438:	4603      	mov	r3, r0
 800543a:	460c      	mov	r4, r1
 800543c:	461a      	mov	r2, r3
 800543e:	4b8b      	ldr	r3, [pc, #556]	; (800566c <UART_SetConfig+0x384>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	; 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	3332      	adds	r3, #50	; 0x32
 8005452:	4a86      	ldr	r2, [pc, #536]	; (800566c <UART_SetConfig+0x384>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005460:	4498      	add	r8, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	461d      	mov	r5, r3
 8005466:	f04f 0600 	mov.w	r6, #0
 800546a:	46a9      	mov	r9, r5
 800546c:	46b2      	mov	sl, r6
 800546e:	eb19 0309 	adds.w	r3, r9, r9
 8005472:	eb4a 040a 	adc.w	r4, sl, sl
 8005476:	4699      	mov	r9, r3
 8005478:	46a2      	mov	sl, r4
 800547a:	eb19 0905 	adds.w	r9, r9, r5
 800547e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800548e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005492:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005496:	4689      	mov	r9, r1
 8005498:	4692      	mov	sl, r2
 800549a:	eb19 0005 	adds.w	r0, r9, r5
 800549e:	eb4a 0106 	adc.w	r1, sl, r6
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	461d      	mov	r5, r3
 80054a8:	f04f 0600 	mov.w	r6, #0
 80054ac:	196b      	adds	r3, r5, r5
 80054ae:	eb46 0406 	adc.w	r4, r6, r6
 80054b2:	461a      	mov	r2, r3
 80054b4:	4623      	mov	r3, r4
 80054b6:	f7fa fe8f 	bl	80001d8 <__aeabi_uldivmod>
 80054ba:	4603      	mov	r3, r0
 80054bc:	460c      	mov	r4, r1
 80054be:	461a      	mov	r2, r3
 80054c0:	4b6a      	ldr	r3, [pc, #424]	; (800566c <UART_SetConfig+0x384>)
 80054c2:	fba3 1302 	umull	r1, r3, r3, r2
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2164      	movs	r1, #100	; 0x64
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a65      	ldr	r2, [pc, #404]	; (800566c <UART_SetConfig+0x384>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 0207 	and.w	r2, r3, #7
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4442      	add	r2, r8
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	e26f      	b.n	80059ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ea:	f7fe fdb5 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 80054ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	461d      	mov	r5, r3
 80054f4:	f04f 0600 	mov.w	r6, #0
 80054f8:	46a8      	mov	r8, r5
 80054fa:	46b1      	mov	r9, r6
 80054fc:	eb18 0308 	adds.w	r3, r8, r8
 8005500:	eb49 0409 	adc.w	r4, r9, r9
 8005504:	4698      	mov	r8, r3
 8005506:	46a1      	mov	r9, r4
 8005508:	eb18 0805 	adds.w	r8, r8, r5
 800550c:	eb49 0906 	adc.w	r9, r9, r6
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800551c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005520:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005524:	4688      	mov	r8, r1
 8005526:	4691      	mov	r9, r2
 8005528:	eb18 0005 	adds.w	r0, r8, r5
 800552c:	eb49 0106 	adc.w	r1, r9, r6
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	461d      	mov	r5, r3
 8005536:	f04f 0600 	mov.w	r6, #0
 800553a:	196b      	adds	r3, r5, r5
 800553c:	eb46 0406 	adc.w	r4, r6, r6
 8005540:	461a      	mov	r2, r3
 8005542:	4623      	mov	r3, r4
 8005544:	f7fa fe48 	bl	80001d8 <__aeabi_uldivmod>
 8005548:	4603      	mov	r3, r0
 800554a:	460c      	mov	r4, r1
 800554c:	461a      	mov	r2, r3
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <UART_SetConfig+0x384>)
 8005550:	fba3 2302 	umull	r2, r3, r3, r2
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	461d      	mov	r5, r3
 800555e:	f04f 0600 	mov.w	r6, #0
 8005562:	46a9      	mov	r9, r5
 8005564:	46b2      	mov	sl, r6
 8005566:	eb19 0309 	adds.w	r3, r9, r9
 800556a:	eb4a 040a 	adc.w	r4, sl, sl
 800556e:	4699      	mov	r9, r3
 8005570:	46a2      	mov	sl, r4
 8005572:	eb19 0905 	adds.w	r9, r9, r5
 8005576:	eb4a 0a06 	adc.w	sl, sl, r6
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800558a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800558e:	4689      	mov	r9, r1
 8005590:	4692      	mov	sl, r2
 8005592:	eb19 0005 	adds.w	r0, r9, r5
 8005596:	eb4a 0106 	adc.w	r1, sl, r6
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	461d      	mov	r5, r3
 80055a0:	f04f 0600 	mov.w	r6, #0
 80055a4:	196b      	adds	r3, r5, r5
 80055a6:	eb46 0406 	adc.w	r4, r6, r6
 80055aa:	461a      	mov	r2, r3
 80055ac:	4623      	mov	r3, r4
 80055ae:	f7fa fe13 	bl	80001d8 <__aeabi_uldivmod>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b2c      	ldr	r3, [pc, #176]	; (800566c <UART_SetConfig+0x384>)
 80055ba:	fba3 1302 	umull	r1, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2164      	movs	r1, #100	; 0x64
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	3332      	adds	r3, #50	; 0x32
 80055cc:	4a27      	ldr	r2, [pc, #156]	; (800566c <UART_SetConfig+0x384>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055da:	4498      	add	r8, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	461d      	mov	r5, r3
 80055e0:	f04f 0600 	mov.w	r6, #0
 80055e4:	46a9      	mov	r9, r5
 80055e6:	46b2      	mov	sl, r6
 80055e8:	eb19 0309 	adds.w	r3, r9, r9
 80055ec:	eb4a 040a 	adc.w	r4, sl, sl
 80055f0:	4699      	mov	r9, r3
 80055f2:	46a2      	mov	sl, r4
 80055f4:	eb19 0905 	adds.w	r9, r9, r5
 80055f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800560c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005610:	4689      	mov	r9, r1
 8005612:	4692      	mov	sl, r2
 8005614:	eb19 0005 	adds.w	r0, r9, r5
 8005618:	eb4a 0106 	adc.w	r1, sl, r6
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	461d      	mov	r5, r3
 8005622:	f04f 0600 	mov.w	r6, #0
 8005626:	196b      	adds	r3, r5, r5
 8005628:	eb46 0406 	adc.w	r4, r6, r6
 800562c:	461a      	mov	r2, r3
 800562e:	4623      	mov	r3, r4
 8005630:	f7fa fdd2 	bl	80001d8 <__aeabi_uldivmod>
 8005634:	4603      	mov	r3, r0
 8005636:	460c      	mov	r4, r1
 8005638:	461a      	mov	r2, r3
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <UART_SetConfig+0x384>)
 800563c:	fba3 1302 	umull	r1, r3, r3, r2
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	2164      	movs	r1, #100	; 0x64
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	3332      	adds	r3, #50	; 0x32
 800564e:	4a07      	ldr	r2, [pc, #28]	; (800566c <UART_SetConfig+0x384>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	f003 0207 	and.w	r2, r3, #7
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4442      	add	r2, r8
 8005660:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005662:	e1b2      	b.n	80059ca <UART_SetConfig+0x6e2>
 8005664:	40011000 	.word	0x40011000
 8005668:	40011400 	.word	0x40011400
 800566c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4ad7      	ldr	r2, [pc, #860]	; (80059d4 <UART_SetConfig+0x6ec>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d005      	beq.n	8005686 <UART_SetConfig+0x39e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4ad6      	ldr	r2, [pc, #856]	; (80059d8 <UART_SetConfig+0x6f0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	f040 80d1 	bne.w	8005828 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005686:	f7fe fcfb 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 800568a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	469a      	mov	sl, r3
 8005690:	f04f 0b00 	mov.w	fp, #0
 8005694:	46d0      	mov	r8, sl
 8005696:	46d9      	mov	r9, fp
 8005698:	eb18 0308 	adds.w	r3, r8, r8
 800569c:	eb49 0409 	adc.w	r4, r9, r9
 80056a0:	4698      	mov	r8, r3
 80056a2:	46a1      	mov	r9, r4
 80056a4:	eb18 080a 	adds.w	r8, r8, sl
 80056a8:	eb49 090b 	adc.w	r9, r9, fp
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056c0:	4688      	mov	r8, r1
 80056c2:	4691      	mov	r9, r2
 80056c4:	eb1a 0508 	adds.w	r5, sl, r8
 80056c8:	eb4b 0609 	adc.w	r6, fp, r9
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4619      	mov	r1, r3
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	f04f 0400 	mov.w	r4, #0
 80056de:	0094      	lsls	r4, r2, #2
 80056e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056e4:	008b      	lsls	r3, r1, #2
 80056e6:	461a      	mov	r2, r3
 80056e8:	4623      	mov	r3, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	4631      	mov	r1, r6
 80056ee:	f7fa fd73 	bl	80001d8 <__aeabi_uldivmod>
 80056f2:	4603      	mov	r3, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	461a      	mov	r2, r3
 80056f8:	4bb8      	ldr	r3, [pc, #736]	; (80059dc <UART_SetConfig+0x6f4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	469b      	mov	fp, r3
 8005708:	f04f 0c00 	mov.w	ip, #0
 800570c:	46d9      	mov	r9, fp
 800570e:	46e2      	mov	sl, ip
 8005710:	eb19 0309 	adds.w	r3, r9, r9
 8005714:	eb4a 040a 	adc.w	r4, sl, sl
 8005718:	4699      	mov	r9, r3
 800571a:	46a2      	mov	sl, r4
 800571c:	eb19 090b 	adds.w	r9, r9, fp
 8005720:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005738:	4689      	mov	r9, r1
 800573a:	4692      	mov	sl, r2
 800573c:	eb1b 0509 	adds.w	r5, fp, r9
 8005740:	eb4c 060a 	adc.w	r6, ip, sl
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	f04f 0400 	mov.w	r4, #0
 8005756:	0094      	lsls	r4, r2, #2
 8005758:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800575c:	008b      	lsls	r3, r1, #2
 800575e:	461a      	mov	r2, r3
 8005760:	4623      	mov	r3, r4
 8005762:	4628      	mov	r0, r5
 8005764:	4631      	mov	r1, r6
 8005766:	f7fa fd37 	bl	80001d8 <__aeabi_uldivmod>
 800576a:	4603      	mov	r3, r0
 800576c:	460c      	mov	r4, r1
 800576e:	461a      	mov	r2, r3
 8005770:	4b9a      	ldr	r3, [pc, #616]	; (80059dc <UART_SetConfig+0x6f4>)
 8005772:	fba3 1302 	umull	r1, r3, r3, r2
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2164      	movs	r1, #100	; 0x64
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	3332      	adds	r3, #50	; 0x32
 8005784:	4a95      	ldr	r2, [pc, #596]	; (80059dc <UART_SetConfig+0x6f4>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005790:	4498      	add	r8, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	469b      	mov	fp, r3
 8005796:	f04f 0c00 	mov.w	ip, #0
 800579a:	46d9      	mov	r9, fp
 800579c:	46e2      	mov	sl, ip
 800579e:	eb19 0309 	adds.w	r3, r9, r9
 80057a2:	eb4a 040a 	adc.w	r4, sl, sl
 80057a6:	4699      	mov	r9, r3
 80057a8:	46a2      	mov	sl, r4
 80057aa:	eb19 090b 	adds.w	r9, r9, fp
 80057ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057b2:	f04f 0100 	mov.w	r1, #0
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057c6:	4689      	mov	r9, r1
 80057c8:	4692      	mov	sl, r2
 80057ca:	eb1b 0509 	adds.w	r5, fp, r9
 80057ce:	eb4c 060a 	adc.w	r6, ip, sl
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4619      	mov	r1, r3
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	f04f 0400 	mov.w	r4, #0
 80057e4:	0094      	lsls	r4, r2, #2
 80057e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ea:	008b      	lsls	r3, r1, #2
 80057ec:	461a      	mov	r2, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	4631      	mov	r1, r6
 80057f4:	f7fa fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80057f8:	4603      	mov	r3, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	461a      	mov	r2, r3
 80057fe:	4b77      	ldr	r3, [pc, #476]	; (80059dc <UART_SetConfig+0x6f4>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	; 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a72      	ldr	r2, [pc, #456]	; (80059dc <UART_SetConfig+0x6f4>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 020f 	and.w	r2, r3, #15
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4442      	add	r2, r8
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	e0d0      	b.n	80059ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe fc16 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 800582c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	469a      	mov	sl, r3
 8005832:	f04f 0b00 	mov.w	fp, #0
 8005836:	46d0      	mov	r8, sl
 8005838:	46d9      	mov	r9, fp
 800583a:	eb18 0308 	adds.w	r3, r8, r8
 800583e:	eb49 0409 	adc.w	r4, r9, r9
 8005842:	4698      	mov	r8, r3
 8005844:	46a1      	mov	r9, r4
 8005846:	eb18 080a 	adds.w	r8, r8, sl
 800584a:	eb49 090b 	adc.w	r9, r9, fp
 800584e:	f04f 0100 	mov.w	r1, #0
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800585a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800585e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005862:	4688      	mov	r8, r1
 8005864:	4691      	mov	r9, r2
 8005866:	eb1a 0508 	adds.w	r5, sl, r8
 800586a:	eb4b 0609 	adc.w	r6, fp, r9
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4619      	mov	r1, r3
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	f04f 0400 	mov.w	r4, #0
 8005880:	0094      	lsls	r4, r2, #2
 8005882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005886:	008b      	lsls	r3, r1, #2
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	4628      	mov	r0, r5
 800588e:	4631      	mov	r1, r6
 8005890:	f7fa fca2 	bl	80001d8 <__aeabi_uldivmod>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	461a      	mov	r2, r3
 800589a:	4b50      	ldr	r3, [pc, #320]	; (80059dc <UART_SetConfig+0x6f4>)
 800589c:	fba3 2302 	umull	r2, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	469b      	mov	fp, r3
 80058aa:	f04f 0c00 	mov.w	ip, #0
 80058ae:	46d9      	mov	r9, fp
 80058b0:	46e2      	mov	sl, ip
 80058b2:	eb19 0309 	adds.w	r3, r9, r9
 80058b6:	eb4a 040a 	adc.w	r4, sl, sl
 80058ba:	4699      	mov	r9, r3
 80058bc:	46a2      	mov	sl, r4
 80058be:	eb19 090b 	adds.w	r9, r9, fp
 80058c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058da:	4689      	mov	r9, r1
 80058dc:	4692      	mov	sl, r2
 80058de:	eb1b 0509 	adds.w	r5, fp, r9
 80058e2:	eb4c 060a 	adc.w	r6, ip, sl
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4619      	mov	r1, r3
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	f04f 0400 	mov.w	r4, #0
 80058f8:	0094      	lsls	r4, r2, #2
 80058fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058fe:	008b      	lsls	r3, r1, #2
 8005900:	461a      	mov	r2, r3
 8005902:	4623      	mov	r3, r4
 8005904:	4628      	mov	r0, r5
 8005906:	4631      	mov	r1, r6
 8005908:	f7fa fc66 	bl	80001d8 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	461a      	mov	r2, r3
 8005912:	4b32      	ldr	r3, [pc, #200]	; (80059dc <UART_SetConfig+0x6f4>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	; 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a2d      	ldr	r2, [pc, #180]	; (80059dc <UART_SetConfig+0x6f4>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005932:	4498      	add	r8, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	469b      	mov	fp, r3
 8005938:	f04f 0c00 	mov.w	ip, #0
 800593c:	46d9      	mov	r9, fp
 800593e:	46e2      	mov	sl, ip
 8005940:	eb19 0309 	adds.w	r3, r9, r9
 8005944:	eb4a 040a 	adc.w	r4, sl, sl
 8005948:	4699      	mov	r9, r3
 800594a:	46a2      	mov	sl, r4
 800594c:	eb19 090b 	adds.w	r9, r9, fp
 8005950:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005968:	4689      	mov	r9, r1
 800596a:	4692      	mov	sl, r2
 800596c:	eb1b 0509 	adds.w	r5, fp, r9
 8005970:	eb4c 060a 	adc.w	r6, ip, sl
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	4619      	mov	r1, r3
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	f04f 0300 	mov.w	r3, #0
 8005982:	f04f 0400 	mov.w	r4, #0
 8005986:	0094      	lsls	r4, r2, #2
 8005988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800598c:	008b      	lsls	r3, r1, #2
 800598e:	461a      	mov	r2, r3
 8005990:	4623      	mov	r3, r4
 8005992:	4628      	mov	r0, r5
 8005994:	4631      	mov	r1, r6
 8005996:	f7fa fc1f 	bl	80001d8 <__aeabi_uldivmod>
 800599a:	4603      	mov	r3, r0
 800599c:	460c      	mov	r4, r1
 800599e:	461a      	mov	r2, r3
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <UART_SetConfig+0x6f4>)
 80059a2:	fba3 1302 	umull	r1, r3, r3, r2
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2164      	movs	r1, #100	; 0x64
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a09      	ldr	r2, [pc, #36]	; (80059dc <UART_SetConfig+0x6f4>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 020f 	and.w	r2, r3, #15
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4442      	add	r2, r8
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	e7ff      	b.n	80059ca <UART_SetConfig+0x6e2>
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	40011000 	.word	0x40011000
 80059d8:	40011400 	.word	0x40011400
 80059dc:	51eb851f 	.word	0x51eb851f

080059e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e0:	b084      	sub	sp, #16
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	f107 001c 	add.w	r0, r7, #28
 80059ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d122      	bne.n	8005a3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d105      	bne.n	8005a32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f94a 	bl	8005ccc <USB_CoreReset>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e01a      	b.n	8005a74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f93e 	bl	8005ccc <USB_CoreReset>
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
 8005a66:	e005      	b.n	8005a74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d10b      	bne.n	8005a92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f043 0206 	orr.w	r2, r3, #6
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a9e:	b004      	add	sp, #16
 8005aa0:	4770      	bx	lr

08005aa2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f023 0201 	bic.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d106      	bne.n	8005b12 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e00b      	b.n	8005b2a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60da      	str	r2, [r3, #12]
 8005b24:	e001      	b.n	8005b2a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e003      	b.n	8005b32 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005b2a:	2032      	movs	r0, #50	; 0x32
 8005b2c:	f7fa fd46 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <USB_FlushTxFifo+0x48>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d0f0      	beq.n	8005b56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	00030d40 	.word	0x00030d40

08005b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2210      	movs	r2, #16
 8005b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <USB_FlushRxFifo+0x40>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d901      	bls.n	8005bac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e006      	b.n	8005bba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b10      	cmp	r3, #16
 8005bb6:	d0f0      	beq.n	8005b9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	00030d40 	.word	0x00030d40

08005bcc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b089      	sub	sp, #36	; 0x24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	460b      	mov	r3, r1
 8005bdc:	71fb      	strb	r3, [r7, #7]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11a      	bne.n	8005c28 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bf2:	88bb      	ldrh	r3, [r7, #4]
 8005bf4:	3303      	adds	r3, #3
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	e00f      	b.n	8005c20 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	031a      	lsls	r2, r3, #12
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3304      	adds	r3, #4
 8005c18:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3eb      	bcc.n	8005c00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3724      	adds	r7, #36	; 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b089      	sub	sp, #36	; 0x24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	3303      	adds	r3, #3
 8005c50:	089b      	lsrs	r3, r3, #2
 8005c52:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	e00b      	b.n	8005c72 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3ef      	bcc.n	8005c5a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3724      	adds	r7, #36	; 0x24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0301 	and.w	r3, r3, #1
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <USB_CoreReset+0x64>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e01b      	b.n	8005d22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	daf2      	bge.n	8005cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <USB_CoreReset+0x64>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e006      	b.n	8005d22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d0f0      	beq.n	8005d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	00030d40 	.word	0x00030d40

08005d34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d34:	b084      	sub	sp, #16
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	f107 001c 	add.w	r0, r7, #28
 8005d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d50:	461a      	mov	r2, r3
 8005d52:	2300      	movs	r3, #0
 8005d54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d10a      	bne.n	8005da2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e014      	b.n	8005dcc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005db0:	f023 0304 	bic.w	r3, r3, #4
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e009      	b.n	8005dcc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005dcc:	2110      	movs	r1, #16
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff feb4 	bl	8005b3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fed7 	bl	8005b88 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e015      	b.n	8005e0c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dec:	461a      	mov	r2, r3
 8005dee:	f04f 33ff 	mov.w	r3, #4294967295
 8005df2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	461a      	mov	r2, r3
 8005e02:	2300      	movs	r3, #0
 8005e04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3e5      	bcc.n	8005de0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005e14:	2101      	movs	r1, #1
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8ac 	bl	8005f74 <USB_DriveVbus>

  HAL_Delay(200U);
 8005e1c:	20c8      	movs	r0, #200	; 0xc8
 8005e1e:	f7fa fbcd 	bl	80005bc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <USB_HostInit+0x164>)
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a13      	ldr	r2, [pc, #76]	; (8005e9c <USB_HostInit+0x168>)
 8005e4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e52:	e009      	b.n	8005e68 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <USB_HostInit+0x16c>)
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a10      	ldr	r2, [pc, #64]	; (8005ea4 <USB_HostInit+0x170>)
 8005e64:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d105      	bne.n	8005e7a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f043 0210 	orr.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <USB_HostInit+0x174>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e92:	b004      	add	sp, #16
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	01000200 	.word	0x01000200
 8005e9c:	00e00300 	.word	0x00e00300
 8005ea0:	00600080 	.word	0x00600080
 8005ea4:	004000e0 	.word	0x004000e0
 8005ea8:	a3200008 	.word	0xa3200008

08005eac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d107      	bne.n	8005efe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005efa:	6053      	str	r3, [r2, #4]
 8005efc:	e009      	b.n	8005f12 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d106      	bne.n	8005f12 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005f10:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f40:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f50:	2064      	movs	r0, #100	; 0x64
 8005f52:	f7fa fb33 	bl	80005bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f62:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f64:	200a      	movs	r0, #10
 8005f66:	f7fa fb29 	bl	80005bc <HAL_Delay>

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <USB_DriveVbus+0x44>
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d106      	bne.n	8005fb8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fb6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc2:	d109      	bne.n	8005fd8 <USB_DriveVbus+0x64>
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fd6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	0c5b      	lsrs	r3, r3, #17
 8006004:	f003 0303 	and.w	r3, r3, #3
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	b29b      	uxth	r3, r3
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	4603      	mov	r3, r0
 8006048:	70fb      	strb	r3, [r7, #3]
 800604a:	460b      	mov	r3, r1
 800604c:	70bb      	strb	r3, [r7, #2]
 800604e:	4613      	mov	r3, r2
 8006050:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800605a:	78fb      	ldrb	r3, [r7, #3]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	461a      	mov	r2, r3
 8006068:	f04f 33ff 	mov.w	r3, #4294967295
 800606c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800606e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006072:	2b03      	cmp	r3, #3
 8006074:	d87e      	bhi.n	8006174 <USB_HC_Init+0x13c>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <USB_HC_Init+0x44>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	0800608d 	.word	0x0800608d
 8006080:	08006137 	.word	0x08006137
 8006084:	0800608d 	.word	0x0800608d
 8006088:	080060f9 	.word	0x080060f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	461a      	mov	r2, r3
 800609a:	f240 439d 	movw	r3, #1181	; 0x49d
 800609e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da10      	bge.n	80060ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	78fa      	ldrb	r2, [r7, #3]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80060c8:	e057      	b.n	800617a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d051      	beq.n	800617a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	78fa      	ldrb	r2, [r7, #3]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060f4:	60d3      	str	r3, [r2, #12]
      break;
 80060f6:	e040      	b.n	800617a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006104:	461a      	mov	r2, r3
 8006106:	f240 639d 	movw	r3, #1693	; 0x69d
 800610a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800610c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006110:	2b00      	cmp	r3, #0
 8006112:	da34      	bge.n	800617e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	440a      	add	r2, r1
 800612a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800612e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006132:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006134:	e023      	b.n	800617e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006142:	461a      	mov	r2, r3
 8006144:	f240 2325 	movw	r3, #549	; 0x225
 8006148:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800614a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da17      	bge.n	8006182 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	440a      	add	r2, r1
 8006168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006170:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006172:	e006      	b.n	8006182 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	75fb      	strb	r3, [r7, #23]
      break;
 8006178:	e004      	b.n	8006184 <USB_HC_Init+0x14c>
      break;
 800617a:	bf00      	nop
 800617c:	e002      	b.n	8006184 <USB_HC_Init+0x14c>
      break;
 800617e:	bf00      	nop
 8006180:	e000      	b.n	8006184 <USB_HC_Init+0x14c>
      break;
 8006182:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	2101      	movs	r1, #1
 8006194:	fa01 f303 	lsl.w	r3, r1, r3
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800619e:	4313      	orrs	r3, r2
 80061a0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80061ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da03      	bge.n	80061be <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80061b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	e001      	b.n	80061c2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80061c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d103      	bne.n	80061d2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e001      	b.n	80061d6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061d6:	787b      	ldrb	r3, [r7, #1]
 80061d8:	059b      	lsls	r3, r3, #22
 80061da:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061de:	78bb      	ldrb	r3, [r7, #2]
 80061e0:	02db      	lsls	r3, r3, #11
 80061e2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061ec:	049b      	lsls	r3, r3, #18
 80061ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061fa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	0159      	lsls	r1, r3, #5
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	440b      	add	r3, r1
 8006208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006212:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006218:	2b03      	cmp	r3, #3
 800621a:	d10f      	bne.n	800623c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	440a      	add	r2, r1
 8006232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800623a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
}
 800623e:	4618      	mov	r0, r3
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006268:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d028      	beq.n	80062c8 <USB_HC_StartXfer+0x7c>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d124      	bne.n	80062c8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <USB_HC_StartXfer+0x50>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	795b      	ldrb	r3, [r3, #5]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	785b      	ldrb	r3, [r3, #1]
 8006290:	4619      	mov	r1, r3
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fa2e 	bl	80066f4 <USB_DoPing>
      return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e112      	b.n	80064c2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d112      	bne.n	80062c8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062bc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80062c0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2200      	movs	r2, #0
 80062c6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d018      	beq.n	8006302 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	8912      	ldrh	r2, [r2, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	3b01      	subs	r3, #1
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	8912      	ldrh	r2, [r2, #8]
 80062e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062e8:	8b7b      	ldrh	r3, [r7, #26]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90b      	bls.n	8006306 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80062ee:	8b7b      	ldrh	r3, [r7, #26]
 80062f0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80062f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	8912      	ldrh	r2, [r2, #8]
 80062f8:	fb02 f203 	mul.w	r2, r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	611a      	str	r2, [r3, #16]
 8006300:	e001      	b.n	8006306 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006302:	2301      	movs	r3, #1
 8006304:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800630e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	8912      	ldrh	r2, [r2, #8]
 8006314:	fb02 f203 	mul.w	r2, r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006326:	04d9      	lsls	r1, r3, #19
 8006328:	4b68      	ldr	r3, [pc, #416]	; (80064cc <USB_HC_StartXfer+0x280>)
 800632a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800632c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	7a9b      	ldrb	r3, [r3, #10]
 8006332:	075b      	lsls	r3, r3, #29
 8006334:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006338:	69f9      	ldr	r1, [r7, #28]
 800633a:	0148      	lsls	r0, r1, #5
 800633c:	6a39      	ldr	r1, [r7, #32]
 800633e:	4401      	add	r1, r0
 8006340:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006344:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006346:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68d9      	ldr	r1, [r3, #12]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	6a3a      	ldr	r2, [r7, #32]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	7e7b      	ldrb	r3, [r7, #25]
 80063aa:	075b      	lsls	r3, r3, #29
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	0148      	lsls	r0, r1, #5
 80063b0:	6a39      	ldr	r1, [r7, #32]
 80063b2:	4401      	add	r1, r0
 80063b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063b8:	4313      	orrs	r3, r2
 80063ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a41      	ldr	r2, [pc, #260]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063cc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063ce:	4b40      	ldr	r3, [pc, #256]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063d6:	4a3e      	ldr	r2, [pc, #248]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063d8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	78db      	ldrb	r3, [r3, #3]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d006      	beq.n	80063f0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063e2:	4b3b      	ldr	r3, [pc, #236]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	4a39      	ldr	r2, [pc, #228]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e005      	b.n	80063fc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063f0:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063fa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063fc:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <USB_HC_StartXfer+0x284>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006404:	4a32      	ldr	r2, [pc, #200]	; (80064d0 <USB_HC_StartXfer+0x284>)
 8006406:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	461a      	mov	r2, r3
 8006416:	4b2e      	ldr	r3, [pc, #184]	; (80064d0 <USB_HC_StartXfer+0x284>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d14e      	bne.n	80064c0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	78db      	ldrb	r3, [r3, #3]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d14a      	bne.n	80064c0 <USB_HC_StartXfer+0x274>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d046      	beq.n	80064c0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	79db      	ldrb	r3, [r3, #7]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d830      	bhi.n	800649c <USB_HC_StartXfer+0x250>
 800643a:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <USB_HC_StartXfer+0x1f4>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	08006451 	.word	0x08006451
 8006444:	08006475 	.word	0x08006475
 8006448:	08006451 	.word	0x08006451
 800644c:	08006475 	.word	0x08006475
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	3303      	adds	r3, #3
 8006456:	089b      	lsrs	r3, r3, #2
 8006458:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800645a:	8afa      	ldrh	r2, [r7, #22]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	b29b      	uxth	r3, r3
 8006462:	429a      	cmp	r2, r3
 8006464:	d91c      	bls.n	80064a0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	619a      	str	r2, [r3, #24]
          }
          break;
 8006472:	e015      	b.n	80064a0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	3303      	adds	r3, #3
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800647e:	8afa      	ldrh	r2, [r7, #22]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	b29b      	uxth	r3, r3
 800648a:	429a      	cmp	r2, r3
 800648c:	d90a      	bls.n	80064a4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]
          }
          break;
 800649a:	e003      	b.n	80064a4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800649c:	bf00      	nop
 800649e:	e002      	b.n	80064a6 <USB_HC_StartXfer+0x25a>
          break;
 80064a0:	bf00      	nop
 80064a2:	e000      	b.n	80064a6 <USB_HC_StartXfer+0x25a>
          break;
 80064a4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68d9      	ldr	r1, [r3, #12]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785a      	ldrb	r2, [r3, #1]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	b298      	uxth	r0, r3
 80064b4:	2300      	movs	r3, #0
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff fb86 	bl	8005bcc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3728      	adds	r7, #40	; 0x28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	1ff80000 	.word	0x1ff80000
 80064d0:	200000ac 	.word	0x200000ac

080064d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	b29b      	uxth	r3, r3
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	0c9b      	lsrs	r3, r3, #18
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <USB_HC_Halt+0x3a>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d16c      	bne.n	800660a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d143      	bne.n	80065e4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800657a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800659a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c8:	d81d      	bhi.n	8006606 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e0:	d0ec      	beq.n	80065bc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80065e2:	e080      	b.n	80066e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006602:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006604:	e06f      	b.n	80066e6 <USB_HC_Halt+0x1f0>
          break;
 8006606:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006608:	e06d      	b.n	80066e6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	440a      	add	r2, r1
 8006620:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006628:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d143      	bne.n	80066c2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	440a      	add	r2, r1
 8006650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006658:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	440a      	add	r2, r1
 8006670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006678:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006694:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006698:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	3301      	adds	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a6:	d81d      	bhi.n	80066e4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066be:	d0ec      	beq.n	800669a <USB_HC_Halt+0x1a4>
 80066c0:	e011      	b.n	80066e6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e000      	b.n	80066e6 <USB_HC_Halt+0x1f0>
          break;
 80066e4:	bf00      	nop
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006708:	2301      	movs	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	04da      	lsls	r2, r3, #19
 8006710:	4b15      	ldr	r3, [pc, #84]	; (8006768 <USB_DoPing+0x74>)
 8006712:	4013      	ands	r3, r2
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006724:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800673c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006744:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	1ff80000 	.word	0x1ff80000

0800676c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff f9a1 	bl	8005ac4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006782:	2110      	movs	r1, #16
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff f9d9 	bl	8005b3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff f9fc 	bl	8005b88 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	e01f      	b.n	80067d6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ca:	461a      	mov	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3301      	adds	r3, #1
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d9dc      	bls.n	8006796 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
 80067e0:	e034      	b.n	800684c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006800:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006808:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	461a      	mov	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3301      	adds	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006828:	d80c      	bhi.n	8006844 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800683c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006840:	d0ec      	beq.n	800681c <USB_StopHost+0xb0>
 8006842:	e000      	b.n	8006846 <USB_StopHost+0xda>
        break;
 8006844:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	3301      	adds	r3, #1
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b0f      	cmp	r3, #15
 8006850:	d9c7      	bls.n	80067e2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006858:	461a      	mov	r2, r3
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f04f 32ff 	mov.w	r2, #4294967295
 8006866:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff f91a 	bl	8005aa2 <USB_EnableGlobalInt>

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af04      	add	r7, sp, #16
 800687e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006880:	2302      	movs	r3, #2
 8006882:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006884:	2301      	movs	r3, #1
 8006886:	2202      	movs	r2, #2
 8006888:	2102      	movs	r1, #2
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc3a 	bl	8007104 <USBH_FindInterface>
 8006890:	4603      	mov	r3, r0
 8006892:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	f000 812a 	beq.w	8006af0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc13 	bl	80070cc <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80068ac:	2050      	movs	r0, #80	; 0x50
 80068ae:	f002 ff8b 	bl	80097c8 <malloc>
 80068b2:	4603      	mov	r3, r0
 80068b4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	211a      	movs	r1, #26
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da15      	bge.n	8006904 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	211a      	movs	r1, #26
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	211a      	movs	r1, #26
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80068fe:	881a      	ldrh	r2, [r3, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fd21 	bl	8008352 <USBH_AllocPipe>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	7819      	ldrb	r1, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	7858      	ldrb	r0, [r3, #1]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	8952      	ldrh	r2, [r2, #10]
 8006930:	9202      	str	r2, [sp, #8]
 8006932:	2203      	movs	r2, #3
 8006934:	9201      	str	r2, [sp, #4]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4623      	mov	r3, r4
 800693a:	4602      	mov	r2, r0
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fcd9 	bl	80082f4 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2200      	movs	r2, #0
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f002 fe62 	bl	8009614 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006950:	2300      	movs	r3, #0
 8006952:	2200      	movs	r2, #0
 8006954:	210a      	movs	r1, #10
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fbd4 	bl	8007104 <USBH_FindInterface>
 800695c:	4603      	mov	r3, r0
 800695e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	2bff      	cmp	r3, #255	; 0xff
 8006964:	f000 80c4 	beq.w	8006af0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	211a      	movs	r1, #26
 800696e:	fb01 f303 	mul.w	r3, r1, r3
 8006972:	4413      	add	r3, r2
 8006974:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	b25b      	sxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	da16      	bge.n	80069ae <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	211a      	movs	r1, #26
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006996:	7bbb      	ldrb	r3, [r7, #14]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	211a      	movs	r1, #26
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80069a6:	881a      	ldrh	r2, [r3, #0]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	835a      	strh	r2, [r3, #26]
 80069ac:	e015      	b.n	80069da <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	211a      	movs	r1, #26
 80069b4:	fb01 f303 	mul.w	r3, r1, r3
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	211a      	movs	r1, #26
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80069d4:	881a      	ldrh	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	211a      	movs	r1, #26
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da16      	bge.n	8006a20 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	211a      	movs	r1, #26
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	4413      	add	r3, r2
 80069fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	211a      	movs	r1, #26
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	835a      	strh	r2, [r3, #26]
 8006a1e:	e015      	b.n	8006a4c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	211a      	movs	r1, #26
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	211a      	movs	r1, #26
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	7b9b      	ldrb	r3, [r3, #14]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fc7d 	bl	8008352 <USBH_AllocPipe>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	7bdb      	ldrb	r3, [r3, #15]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc73 	bl	8008352 <USBH_AllocPipe>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	7b59      	ldrb	r1, [r3, #13]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	7b98      	ldrb	r0, [r3, #14]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	8b12      	ldrh	r2, [r2, #24]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	9201      	str	r2, [sp, #4]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	4623      	mov	r3, r4
 8006a96:	4602      	mov	r2, r0
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fc2b 	bl	80082f4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	7b19      	ldrb	r1, [r3, #12]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	7bd8      	ldrb	r0, [r3, #15]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	8b52      	ldrh	r2, [r2, #26]
 8006ab6:	9202      	str	r2, [sp, #8]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4623      	mov	r3, r4
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fc16 	bl	80082f4 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	7b5b      	ldrb	r3, [r3, #13]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 fd9b 	bl	8009614 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	7b1b      	ldrb	r3, [r3, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f002 fd94 	bl	8009614 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd90      	pop	{r4, r7, pc}

08006afa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00e      	beq.n	8006b32 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fc09 	bl	8008332 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fc31 	bl	800838e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	7b1b      	ldrb	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fbf6 	bl	8008332 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	7b1b      	ldrb	r3, [r3, #12]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fc1e 	bl	800838e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	7b5b      	ldrb	r3, [r3, #13]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7b5b      	ldrb	r3, [r3, #13]
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f001 fbe3 	bl	8008332 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	7b5b      	ldrb	r3, [r3, #13]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fc0b 	bl	800838e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f002 fe20 	bl	80097d8 <free>
    phost->pActiveClass->pData = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	3340      	adds	r3, #64	; 0x40
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f8b2 	bl	8006d32 <GetLineCoding>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bde:	2102      	movs	r1, #2
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
  }
  return status;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d877      	bhi.n	8006d04 <USBH_CDC_Process+0x114>
 8006c14:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <USBH_CDC_Process+0x2c>)
 8006c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1a:	bf00      	nop
 8006c1c:	08006c31 	.word	0x08006c31
 8006c20:	08006c37 	.word	0x08006c37
 8006c24:	08006c67 	.word	0x08006c67
 8006c28:	08006cdb 	.word	0x08006cdb
 8006c2c:	08006ce9 	.word	0x08006ce9
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]
    break;
 8006c34:	e06d      	b.n	8006d12 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f897 	bl	8006d70 <SetLineCoding>
 8006c42:	4603      	mov	r3, r0
 8006c44:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006c54:	e058      	b.n	8006d08 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d055      	beq.n	8006d08 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006c64:	e050      	b.n	8006d08 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3340      	adds	r3, #64	; 0x40
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f860 	bl	8006d32 <GetLineCoding>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d126      	bne.n	8006cca <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8e:	791b      	ldrb	r3, [r3, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d13b      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d133      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cae:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d12b      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cbc:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d124      	bne.n	8006d0c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f95a 	bl	8006f7c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006cc8:	e020      	b.n	8006d0c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d01d      	beq.n	8006d0c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006cd8:	e018      	b.n	8006d0c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f867 	bl	8006dae <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f8dc 	bl	8006e9e <CDC_ProcessReception>
    break;
 8006ce6:	e014      	b.n	8006d12 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fece 	bl	8007a8c <USBH_ClrFeature>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006d02:	e005      	b.n	8006d10 <USBH_CDC_Process+0x120>

  default:
    break;
 8006d04:	bf00      	nop
 8006d06:	e004      	b.n	8006d12 <USBH_CDC_Process+0x122>
    break;
 8006d08:	bf00      	nop
 8006d0a:	e002      	b.n	8006d12 <USBH_CDC_Process+0x122>
    break;
 8006d0c:	bf00      	nop
 8006d0e:	e000      	b.n	8006d12 <USBH_CDC_Process+0x122>
    break;
 8006d10:	bf00      	nop

  }

  return status;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	22a1      	movs	r2, #161	; 0xa1
 8006d40:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2221      	movs	r2, #33	; 0x21
 8006d46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2207      	movs	r2, #7
 8006d58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2207      	movs	r2, #7
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f873 	bl	8007e4c <USBH_CtlReq>
 8006d66:	4603      	mov	r3, r0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2221      	movs	r2, #33	; 0x21
 8006d7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2207      	movs	r2, #7
 8006d96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2207      	movs	r2, #7
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 f854 	bl	8007e4c <USBH_CtlReq>
 8006da4:	4603      	mov	r3, r0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af02      	add	r7, sp, #8
 8006db4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d002      	beq.n	8006dd4 <CDC_ProcessTransmission+0x26>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d025      	beq.n	8006e1e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006dd2:	e060      	b.n	8006e96 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	8b12      	ldrh	r2, [r2, #24]
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d90c      	bls.n	8006dfa <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	69d9      	ldr	r1, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8b1a      	ldrh	r2, [r3, #24]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	7b58      	ldrb	r0, [r3, #13]
 8006dec:	2301      	movs	r3, #1
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4603      	mov	r3, r0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fa3b 	bl	800826e <USBH_BulkSendData>
 8006df8:	e00c      	b.n	8006e14 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	7b58      	ldrb	r0, [r3, #13]
 8006e08:	2301      	movs	r3, #1
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f001 fa2d 	bl	800826e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006e1c:	e03b      	b.n	8006e96 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	7b5b      	ldrb	r3, [r3, #13]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 fbcb 	bl	80095c0 <USBH_LL_GetURBState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d128      	bne.n	8006e86 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	8b12      	ldrh	r2, [r2, #24]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d90e      	bls.n	8006e5e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	8b12      	ldrh	r2, [r2, #24]
 8006e48:	1a9a      	subs	r2, r3, r2
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	8b12      	ldrh	r2, [r2, #24]
 8006e56:	441a      	add	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	61da      	str	r2, [r3, #28]
 8006e5c:	e002      	b.n	8006e64 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006e74:	e00e      	b.n	8006e94 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f868 	bl	8006f54 <USBH_CDC_TransmitCallback>
    break;
 8006e84:	e006      	b.n	8006e94 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d103      	bne.n	8006e94 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006e94:	bf00      	nop
  }
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d002      	beq.n	8006ec4 <CDC_ProcessReception+0x26>
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d00e      	beq.n	8006ee0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006ec2:	e043      	b.n	8006f4c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6a19      	ldr	r1, [r3, #32]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	8b5a      	ldrh	r2, [r3, #26]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	7b1b      	ldrb	r3, [r3, #12]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f9f1 	bl	80082b8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2204      	movs	r2, #4
 8006eda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006ede:	e035      	b.n	8006f4c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	7b1b      	ldrb	r3, [r3, #12]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 fb6a 	bl	80095c0 <USBH_LL_GetURBState>
 8006eec:	4603      	mov	r3, r0
 8006eee:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006ef0:	7cfb      	ldrb	r3, [r7, #19]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d129      	bne.n	8006f4a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 facd 	bl	800949c <USBH_LL_GetLastXferSize>
 8006f02:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d016      	beq.n	8006f3c <CDC_ProcessReception+0x9e>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	8b5b      	ldrh	r3, [r3, #26]
 8006f12:	461a      	mov	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d910      	bls.n	8006f3c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad2      	subs	r2, r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2203      	movs	r2, #3
 8006f36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006f3a:	e006      	b.n	8006f4a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f80f 	bl	8006f68 <USBH_CDC_ReceiveCallback>
    break;
 8006f4a:	bf00      	nop
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e019      	b.n	8006fdc <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	79fa      	ldrb	r2, [r7, #7]
 8006fac:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f80f 	bl	8006fe4 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f002 f9af 	bl	8009338 <USBH_LL_Init>

  return USBH_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006ff0:	e008      	b.n	8007004 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	32e0      	adds	r2, #224	; 0xe0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b0e      	cmp	r3, #14
 8007008:	d9f3      	bls.n	8006ff2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e009      	b.n	8007024 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702a:	d3f1      	bcc.n	8007010 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2240      	movs	r2, #64	; 0x40
 8007050:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d017      	beq.n	80070ba <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	33dc      	adds	r3, #220	; 0xdc
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e004      	b.n	80070be <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070b4:	2302      	movs	r3, #2
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e001      	b.n	80070be <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070ba:	2302      	movs	r3, #2
 80070bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d204      	bcs.n	80070f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	78fa      	ldrb	r2, [r7, #3]
 80070ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80070f0:	e001      	b.n	80070f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070f2:	2302      	movs	r3, #2
 80070f4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	4608      	mov	r0, r1
 800710e:	4611      	mov	r1, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4603      	mov	r3, r0
 8007114:	70fb      	strb	r3, [r7, #3]
 8007116:	460b      	mov	r3, r1
 8007118:	70bb      	strb	r3, [r7, #2]
 800711a:	4613      	mov	r3, r2
 800711c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800712c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800712e:	e025      	b.n	800717c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	221a      	movs	r2, #26
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	3308      	adds	r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	3302      	adds	r3, #2
 8007140:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	795b      	ldrb	r3, [r3, #5]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	429a      	cmp	r2, r3
 800714a:	d002      	beq.n	8007152 <USBH_FindInterface+0x4e>
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2bff      	cmp	r3, #255	; 0xff
 8007150:	d111      	bne.n	8007176 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007156:	78ba      	ldrb	r2, [r7, #2]
 8007158:	429a      	cmp	r2, r3
 800715a:	d002      	beq.n	8007162 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	2bff      	cmp	r3, #255	; 0xff
 8007160:	d109      	bne.n	8007176 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007166:	787a      	ldrb	r2, [r7, #1]
 8007168:	429a      	cmp	r2, r3
 800716a:	d002      	beq.n	8007172 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d101      	bne.n	8007176 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	e006      	b.n	8007184 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	3301      	adds	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d9d6      	bls.n	8007130 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007182:	23ff      	movs	r3, #255	; 0xff
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 f909 	bl	80093b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800719e:	2101      	movs	r1, #1
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f002 fa20 	bl	80095e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071b8:	2302      	movs	r3, #2
 80071ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 faec 	bl	800779e <USBH_IsPortEnabled>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <USBH_Process+0x36>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d002      	beq.n	80071e6 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2203      	movs	r2, #3
 80071e4:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b0b      	cmp	r3, #11
 80071ee:	f200 814c 	bhi.w	800748a <USBH_Process+0x2da>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <USBH_Process+0x48>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007229 	.word	0x08007229
 80071fc:	0800724b 	.word	0x0800724b
 8007200:	0800725f 	.word	0x0800725f
 8007204:	08007465 	.word	0x08007465
 8007208:	0800748b 	.word	0x0800748b
 800720c:	080072ed 	.word	0x080072ed
 8007210:	0800741b 	.word	0x0800741b
 8007214:	0800731d 	.word	0x0800731d
 8007218:	0800733d 	.word	0x0800733d
 800721c:	0800735d 	.word	0x0800735d
 8007220:	0800738b 	.word	0x0800738b
 8007224:	0800744d 	.word	0x0800744d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 812c 	beq.w	800748e <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800723c:	20c8      	movs	r0, #200	; 0xc8
 800723e:	f002 fa1c 	bl	800967a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f002 f90f 	bl	8009466 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007248:	e121      	b.n	800748e <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007250:	2b01      	cmp	r3, #1
 8007252:	f040 811e 	bne.w	8007492 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800725c:	e119      	b.n	8007492 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800725e:	2064      	movs	r0, #100	; 0x64
 8007260:	f002 fa0b 	bl	800967a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f002 f8d9 	bl	800941c <USBH_LL_GetSpeed>
 800726a:	4603      	mov	r3, r0
 800726c:	461a      	mov	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2205      	movs	r2, #5
 8007278:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800727a:	2100      	movs	r1, #0
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f868 	bl	8008352 <USBH_AllocPipe>
 8007282:	4603      	mov	r3, r0
 8007284:	461a      	mov	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800728a:	2180      	movs	r1, #128	; 0x80
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f860 	bl	8008352 <USBH_AllocPipe>
 8007292:	4603      	mov	r3, r0
 8007294:	461a      	mov	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7919      	ldrb	r1, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80072ae:	b292      	uxth	r2, r2
 80072b0:	9202      	str	r2, [sp, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	9201      	str	r2, [sp, #4]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	2280      	movs	r2, #128	; 0x80
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f819 	bl	80082f4 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7959      	ldrb	r1, [r3, #5]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80072d6:	b292      	uxth	r2, r2
 80072d8:	9202      	str	r2, [sp, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	9201      	str	r2, [sp, #4]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	2200      	movs	r2, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f805 	bl	80082f4 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80072ea:	e0e3      	b.n	80074b4 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f8e7 	bl	80074c0 <USBH_HandleEnum>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 80ce 	bne.w	8007496 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007308:	2b01      	cmp	r3, #1
 800730a:	d103      	bne.n	8007314 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2208      	movs	r2, #8
 8007310:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8007312:	e0c0      	b.n	8007496 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2207      	movs	r2, #7
 8007318:	701a      	strb	r2, [r3, #0]
    break;
 800731a:	e0bc      	b.n	8007496 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80b9 	beq.w	800749a <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800732e:	2101      	movs	r1, #1
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2208      	movs	r2, #8
 8007338:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800733a:	e0ae      	b.n	800749a <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8007342:	b29b      	uxth	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb59 	bl	80079fe <USBH_SetCfg>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 80a5 	bne.w	800749e <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2209      	movs	r2, #9
 8007358:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800735a:	e0a0      	b.n	800749e <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb69 	bl	8007a44 <USBH_SetFeature>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8094 	bne.w	80074a2 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	220a      	movs	r2, #10
 800737e:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007380:	e08f      	b.n	80074a2 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220a      	movs	r2, #10
 8007386:	701a      	strb	r2, [r3, #0]
    break;
 8007388:	e08b      	b.n	80074a2 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8088 	beq.w	80074a6 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	e017      	b.n	80073d4 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	33dc      	adds	r3, #220	; 0xdc
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	791a      	ldrb	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d108      	bne.n	80073ce <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	33dc      	adds	r3, #220	; 0xdc
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	3301      	adds	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d016      	beq.n	8007412 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2206      	movs	r2, #6
 80073fa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007402:	2103      	movs	r1, #3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007408:	e04d      	b.n	80074a6 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220d      	movs	r2, #13
 800740e:	701a      	strb	r2, [r3, #0]
    break;
 8007410:	e049      	b.n	80074a6 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	220d      	movs	r2, #13
 8007416:	701a      	strb	r2, [r3, #0]
    break;
 8007418:	e045      	b.n	80074a6 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00f      	beq.n	8007444 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
 8007430:	4603      	mov	r3, r0
 8007432:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d136      	bne.n	80074aa <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	220b      	movs	r2, #11
 8007440:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007442:	e032      	b.n	80074aa <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	220d      	movs	r2, #13
 8007448:	701a      	strb	r2, [r3, #0]
    break;
 800744a:	e02e      	b.n	80074aa <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02b      	beq.n	80074ae <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
    }
    break;
 8007462:	e024      	b.n	80074ae <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fdbd 	bl	8006fe4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01e      	beq.n	80074b2 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007488:	e013      	b.n	80074b2 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800748a:	bf00      	nop
 800748c:	e012      	b.n	80074b4 <USBH_Process+0x304>
    break;
 800748e:	bf00      	nop
 8007490:	e010      	b.n	80074b4 <USBH_Process+0x304>
    break;
 8007492:	bf00      	nop
 8007494:	e00e      	b.n	80074b4 <USBH_Process+0x304>
    break;
 8007496:	bf00      	nop
 8007498:	e00c      	b.n	80074b4 <USBH_Process+0x304>
    break;
 800749a:	bf00      	nop
 800749c:	e00a      	b.n	80074b4 <USBH_Process+0x304>
    break;
 800749e:	bf00      	nop
 80074a0:	e008      	b.n	80074b4 <USBH_Process+0x304>
    break;
 80074a2:	bf00      	nop
 80074a4:	e006      	b.n	80074b4 <USBH_Process+0x304>
    break;
 80074a6:	bf00      	nop
 80074a8:	e004      	b.n	80074b4 <USBH_Process+0x304>
    break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <USBH_Process+0x304>
    break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <USBH_Process+0x304>
    break;
 80074b2:	bf00      	nop
  }
 return USBH_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop

080074c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b07      	cmp	r3, #7
 80074d2:	f200 80f8 	bhi.w	80076c6 <USBH_HandleEnum+0x206>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <USBH_HandleEnum+0x1c>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	080074fd 	.word	0x080074fd
 80074e0:	0800756f 	.word	0x0800756f
 80074e4:	08007587 	.word	0x08007587
 80074e8:	080075fd 	.word	0x080075fd
 80074ec:	08007613 	.word	0x08007613
 80074f0:	0800762f 	.word	0x0800762f
 80074f4:	08007663 	.word	0x08007663
 80074f8:	08007697 	.word	0x08007697
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80074fc:	2108      	movs	r1, #8
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f9ad 	bl	800785e <USBH_Get_DevDesc>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 80df 	bne.w	80076ca <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7919      	ldrb	r1, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007530:	b292      	uxth	r2, r2
 8007532:	9202      	str	r2, [sp, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	9201      	str	r2, [sp, #4]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4603      	mov	r3, r0
 800753c:	2280      	movs	r2, #128	; 0x80
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fed8 	bl	80082f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	7959      	ldrb	r1, [r3, #5]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007558:	b292      	uxth	r2, r2
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	9201      	str	r2, [sp, #4]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4603      	mov	r3, r0
 8007564:	2200      	movs	r2, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fec4 	bl	80082f4 <USBH_OpenPipe>

    }
    break;
 800756c:	e0ad      	b.n	80076ca <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800756e:	2112      	movs	r1, #18
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f974 	bl	800785e <USBH_Get_DevDesc>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 80a8 	bne.w	80076ce <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007584:	e0a3      	b.n	80076ce <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007586:	2101      	movs	r1, #1
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fa14 	bl	80079b6 <USBH_SetAddress>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 809e 	bne.w	80076d2 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8007596:	2002      	movs	r0, #2
 8007598:	f002 f86f 	bl	800967a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2203      	movs	r2, #3
 80075a8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7919      	ldrb	r1, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80075be:	b292      	uxth	r2, r2
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	9201      	str	r2, [sp, #4]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	4603      	mov	r3, r0
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fe91 	bl	80082f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	7959      	ldrb	r1, [r3, #5]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80075e6:	b292      	uxth	r2, r2
 80075e8:	9202      	str	r2, [sp, #8]
 80075ea:	2200      	movs	r2, #0
 80075ec:	9201      	str	r2, [sp, #4]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	4603      	mov	r3, r0
 80075f2:	2200      	movs	r2, #0
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fe7d 	bl	80082f4 <USBH_OpenPipe>
    }
    break;
 80075fa:	e06a      	b.n	80076d2 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80075fc:	2109      	movs	r1, #9
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f955 	bl	80078ae <USBH_Get_CfgDesc>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d165      	bne.n	80076d6 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2204      	movs	r2, #4
 800760e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007610:	e061      	b.n	80076d6 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f947 	bl	80078ae <USBH_Get_CfgDesc>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d159      	bne.n	80076da <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2205      	movs	r2, #5
 800762a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800762c:	e055      	b.n	80076da <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007634:	2b00      	cmp	r3, #0
 8007636:	d010      	beq.n	800765a <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007644:	23ff      	movs	r3, #255	; 0xff
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f955 	bl	80078f6 <USBH_Get_StringDesc>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d145      	bne.n	80076de <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2206      	movs	r2, #6
 8007656:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007658:	e041      	b.n	80076de <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2206      	movs	r2, #6
 800765e:	705a      	strb	r2, [r3, #1]
    break;
 8007660:	e03d      	b.n	80076de <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007668:	2b00      	cmp	r3, #0
 800766a:	d010      	beq.n	800768e <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007678:	23ff      	movs	r3, #255	; 0xff
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f93b 	bl	80078f6 <USBH_Get_StringDesc>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d12d      	bne.n	80076e2 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2207      	movs	r2, #7
 800768a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800768c:	e029      	b.n	80076e2 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2207      	movs	r2, #7
 8007692:	705a      	strb	r2, [r3, #1]
    break;
 8007694:	e025      	b.n	80076e2 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00f      	beq.n	80076c0 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80076ac:	23ff      	movs	r3, #255	; 0xff
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f921 	bl	80078f6 <USBH_Get_StringDesc>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d115      	bne.n	80076e6 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80076be:	e012      	b.n	80076e6 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
    break;
 80076c4:	e00f      	b.n	80076e6 <USBH_HandleEnum+0x226>

  default:
    break;
 80076c6:	bf00      	nop
 80076c8:	e00e      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076ca:	bf00      	nop
 80076cc:	e00c      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076ce:	bf00      	nop
 80076d0:	e00a      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076d2:	bf00      	nop
 80076d4:	e008      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076d6:	bf00      	nop
 80076d8:	e006      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076da:	bf00      	nop
 80076dc:	e004      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076de:	bf00      	nop
 80076e0:	e002      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076e2:	bf00      	nop
 80076e4:	e000      	b.n	80076e8 <USBH_HandleEnum+0x228>
    break;
 80076e6:	bf00      	nop
  }
  return Status;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop

080076f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f804 	bl	8007736 <USBH_HandleSof>
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b0b      	cmp	r3, #11
 8007746:	d10a      	bne.n	800775e <USBH_HandleSof+0x28>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
  }
}
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007776:	bf00      	nop
}
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007792:	bf00      	nop
}
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10f      	bne.n	80077ea <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00e      	beq.n	80077fa <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077e2:	2104      	movs	r1, #4
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
 80077e8:	e007      	b.n	80077fa <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d102      	bne.n	80077fa <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f001 fdea 	bl	80093e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	791b      	ldrb	r3, [r3, #4]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fdb8 	bl	800838e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fdb2 	bl	800838e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007842:	2105      	movs	r1, #5
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fdb1 	bl	80093b0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2203      	movs	r2, #3
 8007852:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af02      	add	r7, sp, #8
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	b29b      	uxth	r3, r3
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787c:	2100      	movs	r1, #0
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f864 	bl	800794c <USBH_GetDescriptor>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	b292      	uxth	r2, r2
 800789e:	4619      	mov	r1, r3
 80078a0:	f000 f918 	bl	8007ad4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af02      	add	r7, sp, #8
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	331c      	adds	r3, #28
 80078be:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80078c0:	887b      	ldrh	r3, [r7, #2]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ca:	2100      	movs	r1, #0
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f83d 	bl	800794c <USBH_GetDescriptor>
 80078d2:	4603      	mov	r3, r0
 80078d4:	72fb      	strb	r3, [r7, #11]
 80078d6:	7afb      	ldrb	r3, [r7, #11]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80078e2:	887a      	ldrh	r2, [r7, #2]
 80078e4:	68f9      	ldr	r1, [r7, #12]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f964 	bl	8007bb4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af02      	add	r7, sp, #8
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	461a      	mov	r2, r3
 8007902:	460b      	mov	r3, r1
 8007904:	72fb      	strb	r3, [r7, #11]
 8007906:	4613      	mov	r3, r2
 8007908:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007912:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800791a:	893b      	ldrh	r3, [r7, #8]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	460b      	mov	r3, r1
 8007920:	2100      	movs	r1, #0
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f812 	bl	800794c <USBH_GetDescriptor>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d107      	bne.n	8007942 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007938:	893a      	ldrh	r2, [r7, #8]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fa37 	bl	8007db0 <USBH_ParseStringDesc>
  }
  return status;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	72fb      	strb	r3, [r7, #11]
 800795a:	4613      	mov	r3, r2
 800795c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	789b      	ldrb	r3, [r3, #2]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d11c      	bne.n	80079a0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007966:	7afb      	ldrb	r3, [r7, #11]
 8007968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800796c:	b2da      	uxtb	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2206      	movs	r2, #6
 8007976:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	893a      	ldrh	r2, [r7, #8]
 800797c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800797e:	893b      	ldrh	r3, [r7, #8]
 8007980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007988:	d104      	bne.n	8007994 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f240 4209 	movw	r2, #1033	; 0x409
 8007990:	829a      	strh	r2, [r3, #20]
 8007992:	e002      	b.n	800799a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8b3a      	ldrh	r2, [r7, #24]
 800799e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80079a0:	8b3b      	ldrh	r3, [r7, #24]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fa50 	bl	8007e4c <USBH_CtlReq>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	789b      	ldrb	r3, [r3, #2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10f      	bne.n	80079ea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2205      	movs	r2, #5
 80079d4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fa2c 	bl	8007e4c <USBH_CtlReq>
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	789b      	ldrb	r3, [r3, #2]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d10e      	bne.n	8007a30 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2209      	movs	r2, #9
 8007a1c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	887a      	ldrh	r2, [r7, #2]
 8007a22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fa09 	bl	8007e4c <USBH_CtlReq>
 8007a3a:	4603      	mov	r3, r0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	789b      	ldrb	r3, [r3, #2]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10f      	bne.n	8007a78 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2203      	movs	r2, #3
 8007a62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9e5 	bl	8007e4c <USBH_CtlReq>
 8007a82:	4603      	mov	r3, r0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	789b      	ldrb	r3, [r3, #2]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9c1 	bl	8007e4c <USBH_CtlReq>
 8007aca:	4603      	mov	r3, r0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	785a      	ldrb	r2, [r3, #1]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	3302      	adds	r3, #2
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3303      	adds	r3, #3
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	791a      	ldrb	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	795a      	ldrb	r2, [r3, #5]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	799a      	ldrb	r2, [r3, #6]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	79da      	ldrb	r2, [r3, #7]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d939      	bls.n	8007ba8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3308      	adds	r3, #8
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	3309      	adds	r3, #9
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	330a      	adds	r3, #10
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	330b      	adds	r3, #11
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	330d      	adds	r3, #13
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	4313      	orrs	r3, r2
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	7b9a      	ldrb	r2, [r3, #14]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	7bda      	ldrb	r2, [r3, #15]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	7c1a      	ldrb	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	7c5a      	ldrb	r2, [r3, #17]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	785a      	ldrb	r2, [r3, #1]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3302      	adds	r3, #2
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3303      	adds	r3, #3
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	021b      	lsls	r3, r3, #8
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	791a      	ldrb	r2, [r3, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	795a      	ldrb	r2, [r3, #5]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	799a      	ldrb	r2, [r3, #6]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	79da      	ldrb	r2, [r3, #7]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7a1a      	ldrb	r2, [r3, #8]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d95f      	bls.n	8007cf0 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c30:	2309      	movs	r3, #9
 8007c32:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c38:	e051      	b.n	8007cde <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c3a:	f107 0316 	add.w	r3, r7, #22
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c42:	f000 f8e8 	bl	8007e16 <USBH_GetNextDesc>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d146      	bne.n	8007cde <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c54:	221a      	movs	r2, #26
 8007c56:	fb02 f303 	mul.w	r3, r2, r3
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3302      	adds	r3, #2
 8007c62:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c66:	69f8      	ldr	r0, [r7, #28]
 8007c68:	f000 f846 	bl	8007cf8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c76:	e022      	b.n	8007cbe <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8007c78:	f107 0316 	add.w	r3, r7, #22
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c80:	f000 f8c9 	bl	8007e16 <USBH_GetNextDesc>
 8007c84:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d117      	bne.n	8007cbe <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c92:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c96:	3201      	adds	r2, #1
 8007c98:	00d2      	lsls	r2, r2, #3
 8007c9a:	211a      	movs	r1, #26
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3304      	adds	r3, #4
 8007caa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8007cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cae:	69b8      	ldr	r0, [r7, #24]
 8007cb0:	f000 f851 	bl	8007d56 <USBH_ParseEPDesc>
            ep_ix++;
 8007cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cb8:	3301      	adds	r3, #1
 8007cba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d204      	bcs.n	8007cd4 <USBH_ParseCfgDesc+0x120>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	885a      	ldrh	r2, [r3, #2]
 8007cce:	8afb      	ldrh	r3, [r7, #22]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d8d1      	bhi.n	8007c78 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd8:	3301      	adds	r3, #1
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d804      	bhi.n	8007cf0 <USBH_ParseCfgDesc+0x13c>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	885a      	ldrh	r2, [r3, #2]
 8007cea:	8afb      	ldrh	r3, [r7, #22]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d8a4      	bhi.n	8007c3a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	3728      	adds	r7, #40	; 0x28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	785a      	ldrb	r2, [r3, #1]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	789a      	ldrb	r2, [r3, #2]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	78da      	ldrb	r2, [r3, #3]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	791a      	ldrb	r2, [r3, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	795a      	ldrb	r2, [r3, #5]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	799a      	ldrb	r2, [r3, #6]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	79da      	ldrb	r2, [r3, #7]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	7a1a      	ldrb	r2, [r3, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	721a      	strb	r2, [r3, #8]
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785a      	ldrb	r2, [r3, #1]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	789a      	ldrb	r2, [r3, #2]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	78da      	ldrb	r2, [r3, #3]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3305      	adds	r3, #5
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	799a      	ldrb	r2, [r3, #6]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	719a      	strb	r2, [r3, #6]
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d120      	bne.n	8007e0a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	1e9a      	subs	r2, r3, #2
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	bf28      	it	cs
 8007dd4:	4613      	movcs	r3, r2
 8007dd6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3302      	adds	r3, #2
 8007ddc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007dde:	2300      	movs	r3, #0
 8007de0:	82fb      	strh	r3, [r7, #22]
 8007de2:	e00b      	b.n	8007dfc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007de4:	8afb      	ldrh	r3, [r7, #22]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	4413      	add	r3, r2
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007df6:	8afb      	ldrh	r3, [r7, #22]
 8007df8:	3302      	adds	r3, #2
 8007dfa:	82fb      	strh	r3, [r7, #22]
 8007dfc:	8afa      	ldrh	r2, [r7, #22]
 8007dfe:	8abb      	ldrh	r3, [r7, #20]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d3ef      	bcc.n	8007de4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	881a      	ldrh	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	789b      	ldrb	r3, [r3, #2]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d002      	beq.n	8007e6c <USBH_CtlReq+0x20>
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d00f      	beq.n	8007e8a <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007e6a:	e034      	b.n	8007ed6 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	88fa      	ldrh	r2, [r7, #6]
 8007e76:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2202      	movs	r2, #2
 8007e82:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
    break;
 8007e88:	e025      	b.n	8007ed6 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f828 	bl	8007ee0 <USBH_HandleControl>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d108      	bne.n	8007eac <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
    break;
 8007eaa:	e013      	b.n	8007ed4 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d108      	bne.n	8007ec4 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	75fb      	strb	r3, [r7, #23]
    break;
 8007ec2:	e007      	b.n	8007ed4 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d104      	bne.n	8007ed4 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	75fb      	strb	r3, [r7, #23]
    break;
 8007ed4:	bf00      	nop
  }
  return status;
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7e1b      	ldrb	r3, [r3, #24]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b0a      	cmp	r3, #10
 8007ef8:	f200 814c 	bhi.w	8008194 <USBH_HandleControl+0x2b4>
 8007efc:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <USBH_HandleControl+0x24>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f31 	.word	0x08007f31
 8007f08:	08007f4b 	.word	0x08007f4b
 8007f0c:	08007fb5 	.word	0x08007fb5
 8007f10:	08007fdb 	.word	0x08007fdb
 8007f14:	08008013 	.word	0x08008013
 8007f18:	0800803f 	.word	0x0800803f
 8007f1c:	08008091 	.word	0x08008091
 8007f20:	080080b3 	.word	0x080080b3
 8007f24:	080080ef 	.word	0x080080ef
 8007f28:	08008117 	.word	0x08008117
 8007f2c:	08008155 	.word	0x08008155
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f103 0110 	add.w	r1, r3, #16
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f939 	bl	80081b4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	761a      	strb	r2, [r3, #24]
    break;
 8007f48:	e12f      	b.n	80081aa <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 fb35 	bl	80095c0 <USBH_LL_GetURBState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d11e      	bne.n	8007f9e <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f68:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8adb      	ldrh	r3, [r3, #22]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007f72:	7b7b      	ldrb	r3, [r7, #13]
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f7e:	e10b      	b.n	8008198 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2205      	movs	r2, #5
 8007f84:	761a      	strb	r2, [r3, #24]
    break;
 8007f86:	e107      	b.n	8008198 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007f88:	7b7b      	ldrb	r3, [r7, #13]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d103      	bne.n	8007f96 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2209      	movs	r2, #9
 8007f92:	761a      	strb	r2, [r3, #24]
    break;
 8007f94:	e100      	b.n	8008198 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2207      	movs	r2, #7
 8007f9a:	761a      	strb	r2, [r3, #24]
    break;
 8007f9c:	e0fc      	b.n	8008198 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d003      	beq.n	8007fac <USBH_HandleControl+0xcc>
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	f040 80f6 	bne.w	8008198 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220b      	movs	r2, #11
 8007fb0:	761a      	strb	r2, [r3, #24]
    break;
 8007fb2:	e0f1      	b.n	8008198 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6899      	ldr	r1, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	899a      	ldrh	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	791b      	ldrb	r3, [r3, #4]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f930 	bl	8008232 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	761a      	strb	r2, [r3, #24]
    break;
 8007fd8:	e0e7      	b.n	80081aa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	791b      	ldrb	r3, [r3, #4]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 faed 	bl	80095c0 <USBH_LL_GetURBState>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2209      	movs	r2, #9
 8007ff4:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d102      	bne.n	8008002 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008000:	e0cc      	b.n	800819c <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b04      	cmp	r3, #4
 8008006:	f040 80c9 	bne.w	800819c <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	220b      	movs	r2, #11
 800800e:	761a      	strb	r2, [r3, #24]
    break;
 8008010:	e0c4      	b.n	800819c <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6899      	ldr	r1, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	899a      	ldrh	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	7958      	ldrb	r0, [r3, #5]
 800801e:	2301      	movs	r3, #1
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4603      	mov	r3, r0
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8df 	bl	80081e8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2206      	movs	r2, #6
 800803a:	761a      	strb	r2, [r3, #24]
    break;
 800803c:	e0b5      	b.n	80081aa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fabb 	bl	80095c0 <USBH_LL_GetURBState>
 800804a:	4603      	mov	r3, r0
 800804c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d103      	bne.n	800805c <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2207      	movs	r2, #7
 8008058:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800805a:	e0a1      	b.n	80081a0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b05      	cmp	r3, #5
 8008060:	d105      	bne.n	800806e <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	220c      	movs	r2, #12
 8008066:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008068:	2303      	movs	r3, #3
 800806a:	73fb      	strb	r3, [r7, #15]
    break;
 800806c:	e098      	b.n	80081a0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d103      	bne.n	800807c <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2205      	movs	r2, #5
 8008078:	761a      	strb	r2, [r3, #24]
    break;
 800807a:	e091      	b.n	80081a0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b04      	cmp	r3, #4
 8008080:	f040 808e 	bne.w	80081a0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	220b      	movs	r2, #11
 8008088:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e087      	b.n	80081a0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f8ca 	bl	8008232 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2208      	movs	r2, #8
 80080ae:	761a      	strb	r2, [r3, #24]

    break;
 80080b0:	e07b      	b.n	80081aa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	791b      	ldrb	r3, [r3, #4]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 fa81 	bl	80095c0 <USBH_LL_GetURBState>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d105      	bne.n	80080d4 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	220d      	movs	r2, #13
 80080cc:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80080d2:	e067      	b.n	80081a4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b04      	cmp	r3, #4
 80080d8:	d103      	bne.n	80080e2 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	220b      	movs	r2, #11
 80080de:	761a      	strb	r2, [r3, #24]
    break;
 80080e0:	e060      	b.n	80081a4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b05      	cmp	r3, #5
 80080e6:	d15d      	bne.n	80081a4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 80080e8:	2303      	movs	r3, #3
 80080ea:	73fb      	strb	r3, [r7, #15]
    break;
 80080ec:	e05a      	b.n	80081a4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	795a      	ldrb	r2, [r3, #5]
 80080f2:	2301      	movs	r3, #1
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4613      	mov	r3, r2
 80080f8:	2200      	movs	r2, #0
 80080fa:	2100      	movs	r1, #0
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f873 	bl	80081e8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	220a      	movs	r2, #10
 8008112:	761a      	strb	r2, [r3, #24]
    break;
 8008114:	e049      	b.n	80081aa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	795b      	ldrb	r3, [r3, #5]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f001 fa4f 	bl	80095c0 <USBH_LL_GetURBState>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d105      	bne.n	8008138 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	220d      	movs	r2, #13
 8008134:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8008136:	e037      	b.n	80081a8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d103      	bne.n	8008146 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2209      	movs	r2, #9
 8008142:	761a      	strb	r2, [r3, #24]
    break;
 8008144:	e030      	b.n	80081a8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d12d      	bne.n	80081a8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	220b      	movs	r2, #11
 8008150:	761a      	strb	r2, [r3, #24]
    break;
 8008152:	e029      	b.n	80081a8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7e5b      	ldrb	r3, [r3, #25]
 8008158:	3301      	adds	r3, #1
 800815a:	b2da      	uxtb	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	765a      	strb	r2, [r3, #25]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7e5b      	ldrb	r3, [r3, #25]
 8008164:	2b02      	cmp	r3, #2
 8008166:	d809      	bhi.n	800817c <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f93c 	bl	80093e6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800817a:	e016      	b.n	80081aa <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008182:	2106      	movs	r1, #6
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800818e:	2302      	movs	r3, #2
 8008190:	73fb      	strb	r3, [r7, #15]
    break;
 8008192:	e00a      	b.n	80081aa <USBH_HandleControl+0x2ca>

  default:
    break;
 8008194:	bf00      	nop
 8008196:	e008      	b.n	80081aa <USBH_HandleControl+0x2ca>
    break;
 8008198:	bf00      	nop
 800819a:	e006      	b.n	80081aa <USBH_HandleControl+0x2ca>
    break;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <USBH_HandleControl+0x2ca>
    break;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <USBH_HandleControl+0x2ca>
    break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <USBH_HandleControl+0x2ca>
    break;
 80081a8:	bf00      	nop
  }
  return status;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	4613      	mov	r3, r2
 80081c0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80081c2:	79f9      	ldrb	r1, [r7, #7]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	2308      	movs	r3, #8
 80081ca:	9302      	str	r3, [sp, #8]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	9301      	str	r3, [sp, #4]
 80081d0:	2300      	movs	r3, #0
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	2200      	movs	r2, #0
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 f9c0 	bl	800955e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af04      	add	r7, sp, #16
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4611      	mov	r1, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	460b      	mov	r3, r1
 80081f8:	80fb      	strh	r3, [r7, #6]
 80081fa:	4613      	mov	r3, r2
 80081fc:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008208:	2300      	movs	r3, #0
 800820a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800820c:	7979      	ldrb	r1, [r7, #5]
 800820e:	7e3b      	ldrb	r3, [r7, #24]
 8008210:	9303      	str	r3, [sp, #12]
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	9302      	str	r3, [sp, #8]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	2301      	movs	r3, #1
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	2200      	movs	r2, #0
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f001 f99b 	bl	800955e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b088      	sub	sp, #32
 8008236:	af04      	add	r7, sp, #16
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	4611      	mov	r1, r2
 800823e:	461a      	mov	r2, r3
 8008240:	460b      	mov	r3, r1
 8008242:	80fb      	strh	r3, [r7, #6]
 8008244:	4613      	mov	r3, r2
 8008246:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008248:	7979      	ldrb	r1, [r7, #5]
 800824a:	2300      	movs	r3, #0
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	2301      	movs	r3, #1
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	2201      	movs	r2, #1
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f001 f97d 	bl	800955e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008264:	2300      	movs	r3, #0

}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b088      	sub	sp, #32
 8008272:	af04      	add	r7, sp, #16
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	4611      	mov	r1, r2
 800827a:	461a      	mov	r2, r3
 800827c:	460b      	mov	r3, r1
 800827e:	80fb      	strh	r3, [r7, #6]
 8008280:	4613      	mov	r3, r2
 8008282:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008292:	7979      	ldrb	r1, [r7, #5]
 8008294:	7e3b      	ldrb	r3, [r7, #24]
 8008296:	9303      	str	r3, [sp, #12]
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	2301      	movs	r3, #1
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2302      	movs	r3, #2
 80082a6:	2200      	movs	r2, #0
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f001 f958 	bl	800955e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af04      	add	r7, sp, #16
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4611      	mov	r1, r2
 80082c4:	461a      	mov	r2, r3
 80082c6:	460b      	mov	r3, r1
 80082c8:	80fb      	strh	r3, [r7, #6]
 80082ca:	4613      	mov	r3, r2
 80082cc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80082ce:	7979      	ldrb	r1, [r7, #5]
 80082d0:	2300      	movs	r3, #0
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	2301      	movs	r3, #1
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2302      	movs	r3, #2
 80082e2:	2201      	movs	r2, #1
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f001 f93a 	bl	800955e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	70fb      	strb	r3, [r7, #3]
 8008306:	460b      	mov	r3, r1
 8008308:	70bb      	strb	r3, [r7, #2]
 800830a:	4613      	mov	r3, r2
 800830c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800830e:	7878      	ldrb	r0, [r7, #1]
 8008310:	78ba      	ldrb	r2, [r7, #2]
 8008312:	78f9      	ldrb	r1, [r7, #3]
 8008314:	8b3b      	ldrh	r3, [r7, #24]
 8008316:	9302      	str	r3, [sp, #8]
 8008318:	7d3b      	ldrb	r3, [r7, #20]
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	7c3b      	ldrb	r3, [r7, #16]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	4603      	mov	r3, r0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f8cd 	bl	80094c2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8008328:	2300      	movs	r3, #0

}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f8ec 	bl	8009520 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008348:	2300      	movs	r3, #0

}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f831 	bl	80083c6 <USBH_GetFreePipe>
 8008364:	4603      	mov	r3, r0
 8008366:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	89fa      	ldrh	r2, [r7, #14]
 8008376:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	32e0      	adds	r2, #224	; 0xe0
 800837e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	b2db      	uxtb	r3, r3
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2b0a      	cmp	r3, #10
 800839e:	d80b      	bhi.n	80083b8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	32e0      	adds	r2, #224	; 0xe0
 80083a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083aa:	78fa      	ldrb	r2, [r7, #3]
 80083ac:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	32e0      	adds	r2, #224	; 0xe0
 80083b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b085      	sub	sp, #20
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80083d2:	2300      	movs	r3, #0
 80083d4:	73fb      	strb	r3, [r7, #15]
 80083d6:	e00e      	b.n	80083f6 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083d8:	7bfa      	ldrb	r2, [r7, #15]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32e0      	adds	r2, #224	; 0xe0
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	e007      	b.n	8008400 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3301      	adds	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b0a      	cmp	r3, #10
 80083fa:	d9ed      	bls.n	80083d8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80083fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800840c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800840e:	b097      	sub	sp, #92	; 0x5c
 8008410:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008412:	f7f8 f861 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008416:	f000 f8e1 	bl	80085dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800841a:	f000 fae5 	bl	80089e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800841e:	f000 f9af 	bl	8008780 <MX_I2C1_Init>
  MX_I2S3_Init();
 8008422:	f000 f9db 	bl	80087dc <MX_I2S3_Init>
  MX_SPI1_Init();
 8008426:	f000 fa09 	bl	800883c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800842a:	f000 fe71 	bl	8009110 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 800842e:	f000 fa3b 	bl	80088a8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8008432:	f000 faaf 	bl	8008994 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8008436:	f000 f951 	bl	80086dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800843a:	210c      	movs	r1, #12
 800843c:	485f      	ldr	r0, [pc, #380]	; (80085bc <main+0x1b0>)
 800843e:	f7fc f835 	bl	80044ac <HAL_TIM_PWM_Start>
  char buffer[20];
  char buf[20];
  int i,command;
  int isLock = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	653b      	str	r3, [r7, #80]	; 0x50
  long long slam[]={-5000,-5000,-5000};
 8008446:	4b5e      	ldr	r3, [pc, #376]	; (80085c0 <main+0x1b4>)
 8008448:	463c      	mov	r4, r7
 800844a:	461d      	mov	r5, r3
 800844c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800844e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008454:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8008458:	f000 fe80 	bl	800915c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_Delay(10);
 800845c:	200a      	movs	r0, #10
 800845e:	f7f8 f8ad 	bl	80005bc <HAL_Delay>
    i = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8008462:	2102      	movs	r1, #2
 8008464:	4857      	ldr	r0, [pc, #348]	; (80085c4 <main+0x1b8>)
 8008466:	f7f8 ff31 	bl	80012cc <HAL_GPIO_ReadPin>
 800846a:	4603      	mov	r3, r0
 800846c:	64fb      	str	r3, [r7, #76]	; 0x4c
    command=0;
 800846e:	2300      	movs	r3, #0
 8008470:	657b      	str	r3, [r7, #84]	; 0x54
    if(HAL_UART_Receive(&huart2, buf, 1, 10)==HAL_OK)
 8008472:	f107 0118 	add.w	r1, r7, #24
 8008476:	230a      	movs	r3, #10
 8008478:	2201      	movs	r2, #1
 800847a:	4853      	ldr	r0, [pc, #332]	; (80085c8 <main+0x1bc>)
 800847c:	f7fc fe44 	bl	8005108 <HAL_UART_Receive>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d102      	bne.n	800848c <main+0x80>
    	command=buf[0]-48;
 8008486:	7e3b      	ldrb	r3, [r7, #24]
 8008488:	3b30      	subs	r3, #48	; 0x30
 800848a:	657b      	str	r3, [r7, #84]	; 0x54
    //sprintf(buffer, "%d \r\n", i);
    //HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);

    if (i==0 && isLock == 0) {
 800848c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848e:	2b00      	cmp	r3, #0
 8008490:	d113      	bne.n	80084ba <main+0xae>
 8008492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008494:	2b00      	cmp	r3, #0
 8008496:	d110      	bne.n	80084ba <main+0xae>
    	TIM4->CCR4 = 12; // Lock
 8008498:	4b4c      	ldr	r3, [pc, #304]	; (80085cc <main+0x1c0>)
 800849a:	220c      	movs	r2, #12
 800849c:	641a      	str	r2, [r3, #64]	; 0x40
    	isLock = 1;
 800849e:	2301      	movs	r3, #1
 80084a0:	653b      	str	r3, [r7, #80]	; 0x50
    	sprintf(buffer, "0");
 80084a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084a6:	2230      	movs	r2, #48	; 0x30
 80084a8:	801a      	strh	r2, [r3, #0]
    	HAL_UART_Transmit(&huart2, buffer, 1, HAL_MAX_DELAY);
 80084aa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80084ae:	f04f 33ff 	mov.w	r3, #4294967295
 80084b2:	2201      	movs	r2, #1
 80084b4:	4844      	ldr	r0, [pc, #272]	; (80085c8 <main+0x1bc>)
 80084b6:	f7fc fd8e 	bl	8004fd6 <HAL_UART_Transmit>
    }

    if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)||command==1) && isLock==1) {
 80084ba:	2101      	movs	r1, #1
 80084bc:	4841      	ldr	r0, [pc, #260]	; (80085c4 <main+0x1b8>)
 80084be:	f7f8 ff05 	bl	80012cc <HAL_GPIO_ReadPin>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <main+0xc2>
 80084c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d117      	bne.n	80084fe <main+0xf2>
 80084ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d114      	bne.n	80084fe <main+0xf2>
    	TIM4->CCR4 = 22; // Unlock
 80084d4:	4b3d      	ldr	r3, [pc, #244]	; (80085cc <main+0x1c0>)
 80084d6:	2216      	movs	r2, #22
 80084d8:	641a      	str	r2, [r3, #64]	; 0x40
    	isLock = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	653b      	str	r3, [r7, #80]	; 0x50
    	sprintf(buffer, "1");
 80084de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084e2:	2231      	movs	r2, #49	; 0x31
 80084e4:	801a      	strh	r2, [r3, #0]
    	HAL_UART_Transmit(&huart2, buffer, 1, HAL_MAX_DELAY);
 80084e6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295
 80084ee:	2201      	movs	r2, #1
 80084f0:	4835      	ldr	r0, [pc, #212]	; (80085c8 <main+0x1bc>)
 80084f2:	f7fc fd70 	bl	8004fd6 <HAL_UART_Transmit>
    	HAL_Delay(2000);
 80084f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80084fa:	f7f8 f85f 	bl	80005bc <HAL_Delay>
    }


    HAL_ADC_Start(&hadc1);
 80084fe:	4834      	ldr	r0, [pc, #208]	; (80085d0 <main+0x1c4>)
 8008500:	f7f8 f8c2 	bl	8000688 <HAL_ADC_Start>
       while(HAL_ADC_PollForConversion(&hadc1,0) != HAL_OK);
 8008504:	bf00      	nop
 8008506:	2100      	movs	r1, #0
 8008508:	4831      	ldr	r0, [pc, #196]	; (80085d0 <main+0x1c4>)
 800850a:	f7f8 f983 	bl	8000814 <HAL_ADC_PollForConversion>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f8      	bne.n	8008506 <main+0xfa>
       int x=HAL_ADC_GetValue(&hadc1);
 8008514:	482e      	ldr	r0, [pc, #184]	; (80085d0 <main+0x1c4>)
 8008516:	f7f8 fa01 	bl	800091c <HAL_ADC_GetValue>
 800851a:	4603      	mov	r3, r0
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
       long long nowTime=HAL_GetTick();
 800851e:	f7f8 f841 	bl	80005a4 <HAL_GetTick>
 8008522:	4603      	mov	r3, r0
 8008524:	f04f 0400 	mov.w	r4, #0
 8008528:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
       if(x>100) {
 800852c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852e:	2b64      	cmp	r3, #100	; 0x64
 8008530:	dd92      	ble.n	8008458 <main+0x4c>
        slam[0]=slam[1];
 8008532:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008536:	e9c7 3400 	strd	r3, r4, [r7]
        slam[1]=slam[2];
 800853a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800853e:	e9c7 3402 	strd	r3, r4, [r7, #8]
        slam[2]=nowTime;
 8008542:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008546:	e9c7 3404 	strd	r3, r4, [r7, #16]
        if(slam[2]-slam[0]<=3000) {
 800854a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800854e:	e9d7 5600 	ldrd	r5, r6, [r7]
 8008552:	460b      	mov	r3, r1
 8008554:	4614      	mov	r4, r2
 8008556:	1b5b      	subs	r3, r3, r5
 8008558:	eb64 0406 	sbc.w	r4, r4, r6
 800855c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	4299      	cmp	r1, r3
 8008566:	eb72 0304 	sbcs.w	r3, r2, r4
 800856a:	f6ff af75 	blt.w	8008458 <main+0x4c>
         slam[0]=-5000;
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <main+0x1c8>)
 8008570:	f04f 34ff 	mov.w	r4, #4294967295
 8008574:	e9c7 3400 	strd	r3, r4, [r7]
         slam[1]=-5000;
 8008578:	4b16      	ldr	r3, [pc, #88]	; (80085d4 <main+0x1c8>)
 800857a:	f04f 34ff 	mov.w	r4, #4294967295
 800857e:	e9c7 3402 	strd	r3, r4, [r7, #8]
         slam[2]=-5000;
 8008582:	4b14      	ldr	r3, [pc, #80]	; (80085d4 <main+0x1c8>)
 8008584:	f04f 34ff 	mov.w	r4, #4294967295
 8008588:	e9c7 3404 	strd	r3, r4, [r7, #16]
         HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800858c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008590:	4811      	ldr	r0, [pc, #68]	; (80085d8 <main+0x1cc>)
 8008592:	f7f8 fecc 	bl	800132e <HAL_GPIO_TogglePin>
         sprintf(buf, "3");
 8008596:	f107 0318 	add.w	r3, r7, #24
 800859a:	2233      	movs	r2, #51	; 0x33
 800859c:	801a      	strh	r2, [r3, #0]
         HAL_UART_Transmit(&huart2, buf, strlen(buf), 1000);
 800859e:	f107 0318 	add.w	r3, r7, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7f7 fe10 	bl	80001c8 <strlen>
 80085a8:	4603      	mov	r3, r0
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	f107 0118 	add.w	r1, r7, #24
 80085b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085b4:	4804      	ldr	r0, [pc, #16]	; (80085c8 <main+0x1bc>)
 80085b6:	f7fc fd0e 	bl	8004fd6 <HAL_UART_Transmit>
  {
 80085ba:	e74d      	b.n	8008458 <main+0x4c>
 80085bc:	200000c4 	.word	0x200000c4
 80085c0:	08009990 	.word	0x08009990
 80085c4:	40020000 	.word	0x40020000
 80085c8:	200001f8 	.word	0x200001f8
 80085cc:	40000800 	.word	0x40000800
 80085d0:	20000158 	.word	0x20000158
 80085d4:	ffffec78 	.word	0xffffec78
 80085d8:	40020c00 	.word	0x40020c00

080085dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b098      	sub	sp, #96	; 0x60
 80085e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085e6:	2230      	movs	r2, #48	; 0x30
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f8fc 	bl	80097e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085f0:	f107 031c 	add.w	r3, r7, #28
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	609a      	str	r2, [r3, #8]
 800860c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <SystemClock_Config+0xf8>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008616:	4a2f      	ldr	r2, [pc, #188]	; (80086d4 <SystemClock_Config+0xf8>)
 8008618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800861c:	6413      	str	r3, [r2, #64]	; 0x40
 800861e:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <SystemClock_Config+0xf8>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800862a:	2300      	movs	r3, #0
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	4b2a      	ldr	r3, [pc, #168]	; (80086d8 <SystemClock_Config+0xfc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a29      	ldr	r2, [pc, #164]	; (80086d8 <SystemClock_Config+0xfc>)
 8008634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	4b27      	ldr	r3, [pc, #156]	; (80086d8 <SystemClock_Config+0xfc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008646:	2301      	movs	r3, #1
 8008648:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800864a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008650:	2302      	movs	r3, #2
 8008652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008654:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800865a:	2304      	movs	r3, #4
 800865c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800865e:	2360      	movs	r3, #96	; 0x60
 8008660:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8008662:	2306      	movs	r3, #6
 8008664:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008666:	2304      	movs	r3, #4
 8008668:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800866a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800866e:	4618      	mov	r0, r3
 8008670:	f7fb f8b8 	bl	80037e4 <HAL_RCC_OscConfig>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800867a:	f000 fabf 	bl	8008bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800867e:	230f      	movs	r3, #15
 8008680:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008682:	2302      	movs	r3, #2
 8008684:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800868a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008696:	f107 031c 	add.w	r3, r7, #28
 800869a:	2101      	movs	r1, #1
 800869c:	4618      	mov	r0, r3
 800869e:	f7fb fb11 	bl	8003cc4 <HAL_RCC_ClockConfig>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80086a8:	f000 faa8 	bl	8008bfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80086ac:	2301      	movs	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80086b0:	2332      	movs	r3, #50	; 0x32
 80086b2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80086b4:	2302      	movs	r3, #2
 80086b6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80086b8:	f107 030c 	add.w	r3, r7, #12
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fb fcf3 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80086c8:	f000 fa98 	bl	8008bfc <Error_Handler>
  }
}
 80086cc:	bf00      	nop
 80086ce:	3760      	adds	r7, #96	; 0x60
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40023800 	.word	0x40023800
 80086d8:	40007000 	.word	0x40007000

080086dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80086e2:	463b      	mov	r3, r7
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	605a      	str	r2, [r3, #4]
 80086ea:	609a      	str	r2, [r3, #8]
 80086ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <MX_ADC1_Init+0x98>)
 80086f0:	4a21      	ldr	r2, [pc, #132]	; (8008778 <MX_ADC1_Init+0x9c>)
 80086f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <MX_ADC1_Init+0x98>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80086fa:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <MX_ADC1_Init+0x98>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <MX_ADC1_Init+0x98>)
 8008702:	2200      	movs	r2, #0
 8008704:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008706:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <MX_ADC1_Init+0x98>)
 8008708:	2200      	movs	r2, #0
 800870a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800870c:	4b19      	ldr	r3, [pc, #100]	; (8008774 <MX_ADC1_Init+0x98>)
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008714:	4b17      	ldr	r3, [pc, #92]	; (8008774 <MX_ADC1_Init+0x98>)
 8008716:	2200      	movs	r2, #0
 8008718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800871a:	4b16      	ldr	r3, [pc, #88]	; (8008774 <MX_ADC1_Init+0x98>)
 800871c:	4a17      	ldr	r2, [pc, #92]	; (800877c <MX_ADC1_Init+0xa0>)
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <MX_ADC1_Init+0x98>)
 8008722:	2200      	movs	r2, #0
 8008724:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <MX_ADC1_Init+0x98>)
 8008728:	2201      	movs	r2, #1
 800872a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800872c:	4b11      	ldr	r3, [pc, #68]	; (8008774 <MX_ADC1_Init+0x98>)
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <MX_ADC1_Init+0x98>)
 8008736:	2201      	movs	r2, #1
 8008738:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800873a:	480e      	ldr	r0, [pc, #56]	; (8008774 <MX_ADC1_Init+0x98>)
 800873c:	f7f7 ff60 	bl	8000600 <HAL_ADC_Init>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008746:	f000 fa59 	bl	8008bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800874a:	2308      	movs	r3, #8
 800874c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008756:	463b      	mov	r3, r7
 8008758:	4619      	mov	r1, r3
 800875a:	4806      	ldr	r0, [pc, #24]	; (8008774 <MX_ADC1_Init+0x98>)
 800875c:	f7f8 f8ec 	bl	8000938 <HAL_ADC_ConfigChannel>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008766:	f000 fa49 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000158 	.word	0x20000158
 8008778:	40012000 	.word	0x40012000
 800877c:	0f000001 	.word	0x0f000001

08008780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <MX_I2C1_Init+0x50>)
 8008786:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <MX_I2C1_Init+0x54>)
 8008788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800878a:	4b11      	ldr	r3, [pc, #68]	; (80087d0 <MX_I2C1_Init+0x50>)
 800878c:	4a12      	ldr	r2, [pc, #72]	; (80087d8 <MX_I2C1_Init+0x58>)
 800878e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <MX_I2C1_Init+0x50>)
 8008792:	2200      	movs	r2, #0
 8008794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008796:	4b0e      	ldr	r3, [pc, #56]	; (80087d0 <MX_I2C1_Init+0x50>)
 8008798:	2200      	movs	r2, #0
 800879a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <MX_I2C1_Init+0x50>)
 800879e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80087a4:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <MX_I2C1_Init+0x50>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <MX_I2C1_Init+0x50>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80087b0:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <MX_I2C1_Init+0x50>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <MX_I2C1_Init+0x50>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80087bc:	4804      	ldr	r0, [pc, #16]	; (80087d0 <MX_I2C1_Init+0x50>)
 80087be:	f7fa fa39 	bl	8002c34 <HAL_I2C_Init>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80087c8:	f000 fa18 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80087cc:	bf00      	nop
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000104 	.word	0x20000104
 80087d4:	40005400 	.word	0x40005400
 80087d8:	000186a0 	.word	0x000186a0

080087dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80087e0:	4b13      	ldr	r3, [pc, #76]	; (8008830 <MX_I2S3_Init+0x54>)
 80087e2:	4a14      	ldr	r2, [pc, #80]	; (8008834 <MX_I2S3_Init+0x58>)
 80087e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80087e6:	4b12      	ldr	r3, [pc, #72]	; (8008830 <MX_I2S3_Init+0x54>)
 80087e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <MX_I2S3_Init+0x54>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <MX_I2S3_Init+0x54>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80087fa:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <MX_I2S3_Init+0x54>)
 80087fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008800:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8008802:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <MX_I2S3_Init+0x54>)
 8008804:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <MX_I2S3_Init+0x5c>)
 8008806:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8008808:	4b09      	ldr	r3, [pc, #36]	; (8008830 <MX_I2S3_Init+0x54>)
 800880a:	2200      	movs	r2, #0
 800880c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800880e:	4b08      	ldr	r3, [pc, #32]	; (8008830 <MX_I2S3_Init+0x54>)
 8008810:	2200      	movs	r2, #0
 8008812:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008814:	4b06      	ldr	r3, [pc, #24]	; (8008830 <MX_I2S3_Init+0x54>)
 8008816:	2200      	movs	r2, #0
 8008818:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <MX_I2S3_Init+0x54>)
 800881c:	f7fa fb42 	bl	8002ea4 <HAL_I2S_Init>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8008826:	f000 f9e9 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800882a:	bf00      	nop
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	20000238 	.word	0x20000238
 8008834:	40003c00 	.word	0x40003c00
 8008838:	00017700 	.word	0x00017700

0800883c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008840:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008842:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <MX_SPI1_Init+0x68>)
 8008844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800884c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800884e:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008850:	2200      	movs	r2, #0
 8008852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008854:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008856:	2200      	movs	r2, #0
 8008858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <MX_SPI1_Init+0x64>)
 800885c:	2200      	movs	r2, #0
 800885e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008860:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008862:	2200      	movs	r2, #0
 8008864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800886c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800886e:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008870:	2200      	movs	r2, #0
 8008872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008876:	2200      	movs	r2, #0
 8008878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800887a:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <MX_SPI1_Init+0x64>)
 800887c:	2200      	movs	r2, #0
 800887e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008882:	2200      	movs	r2, #0
 8008884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <MX_SPI1_Init+0x64>)
 8008888:	220a      	movs	r2, #10
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800888c:	4804      	ldr	r0, [pc, #16]	; (80088a0 <MX_SPI1_Init+0x64>)
 800888e:	f7fb fd49 	bl	8004324 <HAL_SPI_Init>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008898:	f000 f9b0 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800889c:	bf00      	nop
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	200001a0 	.word	0x200001a0
 80088a4:	40013000 	.word	0x40013000

080088a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08e      	sub	sp, #56	; 0x38
 80088ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	605a      	str	r2, [r3, #4]
 80088b8:	609a      	str	r2, [r3, #8]
 80088ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088bc:	f107 0320 	add.w	r3, r7, #32
 80088c0:	2200      	movs	r2, #0
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	2200      	movs	r2, #0
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	605a      	str	r2, [r3, #4]
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	60da      	str	r2, [r3, #12]
 80088d2:	611a      	str	r2, [r3, #16]
 80088d4:	615a      	str	r2, [r3, #20]
 80088d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80088d8:	4b2c      	ldr	r3, [pc, #176]	; (800898c <MX_TIM4_Init+0xe4>)
 80088da:	4a2d      	ldr	r2, [pc, #180]	; (8008990 <MX_TIM4_Init+0xe8>)
 80088dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1599;
 80088de:	4b2b      	ldr	r3, [pc, #172]	; (800898c <MX_TIM4_Init+0xe4>)
 80088e0:	f240 623f 	movw	r2, #1599	; 0x63f
 80088e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088e6:	4b29      	ldr	r3, [pc, #164]	; (800898c <MX_TIM4_Init+0xe4>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80088ec:	4b27      	ldr	r3, [pc, #156]	; (800898c <MX_TIM4_Init+0xe4>)
 80088ee:	22c7      	movs	r2, #199	; 0xc7
 80088f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088f2:	4b26      	ldr	r3, [pc, #152]	; (800898c <MX_TIM4_Init+0xe4>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80088f8:	4b24      	ldr	r3, [pc, #144]	; (800898c <MX_TIM4_Init+0xe4>)
 80088fa:	2280      	movs	r2, #128	; 0x80
 80088fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80088fe:	4823      	ldr	r0, [pc, #140]	; (800898c <MX_TIM4_Init+0xe4>)
 8008900:	f7fb fd74 	bl	80043ec <HAL_TIM_Base_Init>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800890a:	f000 f977 	bl	8008bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800890e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008918:	4619      	mov	r1, r3
 800891a:	481c      	ldr	r0, [pc, #112]	; (800898c <MX_TIM4_Init+0xe4>)
 800891c:	f7fb feca 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8008926:	f000 f969 	bl	8008bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800892a:	4818      	ldr	r0, [pc, #96]	; (800898c <MX_TIM4_Init+0xe4>)
 800892c:	f7fb fd89 	bl	8004442 <HAL_TIM_PWM_Init>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8008936:	f000 f961 	bl	8008bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800893a:	2300      	movs	r3, #0
 800893c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800893e:	2300      	movs	r3, #0
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008942:	f107 0320 	add.w	r3, r7, #32
 8008946:	4619      	mov	r1, r3
 8008948:	4810      	ldr	r0, [pc, #64]	; (800898c <MX_TIM4_Init+0xe4>)
 800894a:	f7fc fa7b 	bl	8004e44 <HAL_TIMEx_MasterConfigSynchronization>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008954:	f000 f952 	bl	8008bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008958:	2360      	movs	r3, #96	; 0x60
 800895a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 15;
 800895c:	230f      	movs	r3, #15
 800895e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008968:	1d3b      	adds	r3, r7, #4
 800896a:	220c      	movs	r2, #12
 800896c:	4619      	mov	r1, r3
 800896e:	4807      	ldr	r0, [pc, #28]	; (800898c <MX_TIM4_Init+0xe4>)
 8008970:	f7fb fdda 	bl	8004528 <HAL_TIM_PWM_ConfigChannel>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800897a:	f000 f93f 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800897e:	4803      	ldr	r0, [pc, #12]	; (800898c <MX_TIM4_Init+0xe4>)
 8008980:	f000 faca 	bl	8008f18 <HAL_TIM_MspPostInit>

}
 8008984:	bf00      	nop
 8008986:	3738      	adds	r7, #56	; 0x38
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	200000c4 	.word	0x200000c4
 8008990:	40000800 	.word	0x40000800

08008994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008998:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 800899a:	4a12      	ldr	r2, [pc, #72]	; (80089e4 <MX_USART2_UART_Init+0x50>)
 800899c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800899e:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80089a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80089a6:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089a8:	2200      	movs	r2, #0
 80089aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089ba:	220c      	movs	r2, #12
 80089bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80089be:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80089ca:	4805      	ldr	r0, [pc, #20]	; (80089e0 <MX_USART2_UART_Init+0x4c>)
 80089cc:	f7fc fab6 	bl	8004f3c <HAL_UART_Init>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80089d6:	f000 f911 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80089da:	bf00      	nop
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	200001f8 	.word	0x200001f8
 80089e4:	40004400 	.word	0x40004400

080089e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08c      	sub	sp, #48	; 0x30
 80089ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ee:	f107 031c 	add.w	r3, r7, #28
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	605a      	str	r2, [r3, #4]
 80089f8:	609a      	str	r2, [r3, #8]
 80089fa:	60da      	str	r2, [r3, #12]
 80089fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	4b77      	ldr	r3, [pc, #476]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a06:	4a76      	ldr	r2, [pc, #472]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a08:	f043 0310 	orr.w	r3, r3, #16
 8008a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0e:	4b74      	ldr	r3, [pc, #464]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	4b70      	ldr	r3, [pc, #448]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a22:	4a6f      	ldr	r2, [pc, #444]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a24:	f043 0304 	orr.w	r3, r3, #4
 8008a28:	6313      	str	r3, [r2, #48]	; 0x30
 8008a2a:	4b6d      	ldr	r3, [pc, #436]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	4b69      	ldr	r3, [pc, #420]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	4a68      	ldr	r2, [pc, #416]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b66      	ldr	r3, [pc, #408]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	4b62      	ldr	r3, [pc, #392]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5a:	4a61      	ldr	r2, [pc, #388]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	6313      	str	r3, [r2, #48]	; 0x30
 8008a62:	4b5f      	ldr	r3, [pc, #380]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60bb      	str	r3, [r7, #8]
 8008a72:	4b5b      	ldr	r3, [pc, #364]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	4a5a      	ldr	r2, [pc, #360]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7e:	4b58      	ldr	r3, [pc, #352]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	60bb      	str	r3, [r7, #8]
 8008a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	607b      	str	r3, [r7, #4]
 8008a8e:	4b54      	ldr	r3, [pc, #336]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	4a53      	ldr	r2, [pc, #332]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a94:	f043 0308 	orr.w	r3, r3, #8
 8008a98:	6313      	str	r3, [r2, #48]	; 0x30
 8008a9a:	4b51      	ldr	r3, [pc, #324]	; (8008be0 <MX_GPIO_Init+0x1f8>)
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2108      	movs	r1, #8
 8008aaa:	484e      	ldr	r0, [pc, #312]	; (8008be4 <MX_GPIO_Init+0x1fc>)
 8008aac:	f7f8 fc26 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	484c      	ldr	r0, [pc, #304]	; (8008be8 <MX_GPIO_Init+0x200>)
 8008ab6:	f7f8 fc21 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8008aba:	2200      	movs	r2, #0
 8008abc:	f247 0110 	movw	r1, #28688	; 0x7010
 8008ac0:	484a      	ldr	r0, [pc, #296]	; (8008bec <MX_GPIO_Init+0x204>)
 8008ac2:	f7f8 fc1b 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8008ac6:	2308      	movs	r3, #8
 8008ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008aca:	2301      	movs	r3, #1
 8008acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8008ad6:	f107 031c 	add.w	r3, r7, #28
 8008ada:	4619      	mov	r1, r3
 8008adc:	4841      	ldr	r0, [pc, #260]	; (8008be4 <MX_GPIO_Init+0x1fc>)
 8008ade:	f7f8 fa5b 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aee:	2300      	movs	r3, #0
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008af2:	f107 031c 	add.w	r3, r7, #28
 8008af6:	4619      	mov	r1, r3
 8008af8:	483b      	ldr	r0, [pc, #236]	; (8008be8 <MX_GPIO_Init+0x200>)
 8008afa:	f7f8 fa4d 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8008afe:	2308      	movs	r3, #8
 8008b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b02:	2302      	movs	r3, #2
 8008b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008b0e:	2305      	movs	r3, #5
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8008b12:	f107 031c 	add.w	r3, r7, #28
 8008b16:	4619      	mov	r1, r3
 8008b18:	4833      	ldr	r0, [pc, #204]	; (8008be8 <MX_GPIO_Init+0x200>)
 8008b1a:	f7f8 fa3d 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008b22:	4b33      	ldr	r3, [pc, #204]	; (8008bf0 <MX_GPIO_Init+0x208>)
 8008b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008b2a:	f107 031c 	add.w	r3, r7, #28
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4830      	ldr	r0, [pc, #192]	; (8008bf4 <MX_GPIO_Init+0x20c>)
 8008b32:	f7f8 fa31 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008b36:	2302      	movs	r3, #2
 8008b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b42:	f107 031c 	add.w	r3, r7, #28
 8008b46:	4619      	mov	r1, r3
 8008b48:	482a      	ldr	r0, [pc, #168]	; (8008bf4 <MX_GPIO_Init+0x20c>)
 8008b4a:	f7f8 fa25 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8008b4e:	2304      	movs	r3, #4
 8008b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b52:	2300      	movs	r3, #0
 8008b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008b5a:	f107 031c 	add.w	r3, r7, #28
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4825      	ldr	r0, [pc, #148]	; (8008bf8 <MX_GPIO_Init+0x210>)
 8008b62:	f7f8 fa19 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8008b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b74:	2300      	movs	r3, #0
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008b78:	2305      	movs	r3, #5
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8008b7c:	f107 031c 	add.w	r3, r7, #28
 8008b80:	4619      	mov	r1, r3
 8008b82:	481d      	ldr	r0, [pc, #116]	; (8008bf8 <MX_GPIO_Init+0x210>)
 8008b84:	f7f8 fa08 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8008b88:	f247 0310 	movw	r3, #28688	; 0x7010
 8008b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b96:	2300      	movs	r3, #0
 8008b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b9a:	f107 031c 	add.w	r3, r7, #28
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4812      	ldr	r0, [pc, #72]	; (8008bec <MX_GPIO_Init+0x204>)
 8008ba2:	f7f8 f9f9 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008ba6:	2320      	movs	r3, #32
 8008ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008baa:	2300      	movs	r3, #0
 8008bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008bb2:	f107 031c 	add.w	r3, r7, #28
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	480c      	ldr	r0, [pc, #48]	; (8008bec <MX_GPIO_Init+0x204>)
 8008bba:	f7f8 f9ed 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008bc2:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <MX_GPIO_Init+0x208>)
 8008bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8008bca:	f107 031c 	add.w	r3, r7, #28
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4804      	ldr	r0, [pc, #16]	; (8008be4 <MX_GPIO_Init+0x1fc>)
 8008bd2:	f7f8 f9e1 	bl	8000f98 <HAL_GPIO_Init>

}
 8008bd6:	bf00      	nop
 8008bd8:	3730      	adds	r7, #48	; 0x30
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40023800 	.word	0x40023800
 8008be4:	40021000 	.word	0x40021000
 8008be8:	40020800 	.word	0x40020800
 8008bec:	40020c00 	.word	0x40020c00
 8008bf0:	10120000 	.word	0x10120000
 8008bf4:	40020000 	.word	0x40020000
 8008bf8:	40020400 	.word	0x40020400

08008bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008c00:	bf00      	nop
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c20:	6453      	str	r3, [r2, #68]	; 0x44
 8008c22:	4b0d      	ldr	r3, [pc, #52]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c2e:	2300      	movs	r3, #0
 8008c30:	603b      	str	r3, [r7, #0]
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <HAL_MspInit+0x4c>)
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008c4a:	2007      	movs	r0, #7
 8008c4c:	f7f8 f962 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	40023800 	.word	0x40023800

08008c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	; 0x28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c64:	f107 0314 	add.w	r3, r7, #20
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a17      	ldr	r2, [pc, #92]	; (8008cd8 <HAL_ADC_MspInit+0x7c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d127      	bne.n	8008cce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	4a15      	ldr	r2, [pc, #84]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	4a0e      	ldr	r2, [pc, #56]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008ca4:	f043 0302 	orr.w	r3, r3, #2
 8008ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <HAL_ADC_MspInit+0x80>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <HAL_ADC_MspInit+0x84>)
 8008cca:	f7f8 f965 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008cce:	bf00      	nop
 8008cd0:	3728      	adds	r7, #40	; 0x28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40012000 	.word	0x40012000
 8008cdc:	40023800 	.word	0x40023800
 8008ce0:	40020400 	.word	0x40020400

08008ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	; 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cec:	f107 0314 	add.w	r3, r7, #20
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a19      	ldr	r2, [pc, #100]	; (8008d68 <HAL_I2C_MspInit+0x84>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d12c      	bne.n	8008d60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	4b18      	ldr	r3, [pc, #96]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	4a17      	ldr	r2, [pc, #92]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d10:	f043 0302 	orr.w	r3, r3, #2
 8008d14:	6313      	str	r3, [r2, #48]	; 0x30
 8008d16:	4b15      	ldr	r3, [pc, #84]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	f003 0302 	and.w	r3, r3, #2
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8008d22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8008d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d28:	2312      	movs	r3, #18
 8008d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d30:	2300      	movs	r3, #0
 8008d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008d34:	2304      	movs	r3, #4
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	480c      	ldr	r0, [pc, #48]	; (8008d70 <HAL_I2C_MspInit+0x8c>)
 8008d40:	f7f8 f92a 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d52:	6413      	str	r3, [r2, #64]	; 0x40
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <HAL_I2C_MspInit+0x88>)
 8008d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d60:	bf00      	nop
 8008d62:	3728      	adds	r7, #40	; 0x28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40005400 	.word	0x40005400
 8008d6c:	40023800 	.word	0x40023800
 8008d70:	40020400 	.word	0x40020400

08008d74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	60da      	str	r2, [r3, #12]
 8008d8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a28      	ldr	r2, [pc, #160]	; (8008e34 <HAL_I2S_MspInit+0xc0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d14a      	bne.n	8008e2c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	4b27      	ldr	r3, [pc, #156]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	4a26      	ldr	r2, [pc, #152]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da4:	6413      	str	r3, [r2, #64]	; 0x40
 8008da6:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	4b20      	ldr	r3, [pc, #128]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	4a1f      	ldr	r2, [pc, #124]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	4a18      	ldr	r2, [pc, #96]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008dd8:	f043 0304 	orr.w	r3, r3, #4
 8008ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8008dde:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <HAL_I2S_MspInit+0xc4>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	60bb      	str	r3, [r7, #8]
 8008de8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8008dea:	2310      	movs	r3, #16
 8008dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dee:	2302      	movs	r3, #2
 8008df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df6:	2300      	movs	r3, #0
 8008df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008dfa:	2306      	movs	r3, #6
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	4619      	mov	r1, r3
 8008e04:	480d      	ldr	r0, [pc, #52]	; (8008e3c <HAL_I2S_MspInit+0xc8>)
 8008e06:	f7f8 f8c7 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8008e0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8008e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e10:	2302      	movs	r3, #2
 8008e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008e1c:	2306      	movs	r3, #6
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e20:	f107 0314 	add.w	r3, r7, #20
 8008e24:	4619      	mov	r1, r3
 8008e26:	4806      	ldr	r0, [pc, #24]	; (8008e40 <HAL_I2S_MspInit+0xcc>)
 8008e28:	f7f8 f8b6 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008e2c:	bf00      	nop
 8008e2e:	3728      	adds	r7, #40	; 0x28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40003c00 	.word	0x40003c00
 8008e38:	40023800 	.word	0x40023800
 8008e3c:	40020000 	.word	0x40020000
 8008e40:	40020800 	.word	0x40020800

08008e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	60da      	str	r2, [r3, #12]
 8008e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a19      	ldr	r2, [pc, #100]	; (8008ec8 <HAL_SPI_MspInit+0x84>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d12b      	bne.n	8008ebe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6e:	4a17      	ldr	r2, [pc, #92]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e74:	6453      	str	r3, [r2, #68]	; 0x44
 8008e76:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7e:	613b      	str	r3, [r7, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8a:	4a10      	ldr	r2, [pc, #64]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6313      	str	r3, [r2, #48]	; 0x30
 8008e92:	4b0e      	ldr	r3, [pc, #56]	; (8008ecc <HAL_SPI_MspInit+0x88>)
 8008e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8008e9e:	23e0      	movs	r3, #224	; 0xe0
 8008ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008eae:	2305      	movs	r3, #5
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb2:	f107 0314 	add.w	r3, r7, #20
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <HAL_SPI_MspInit+0x8c>)
 8008eba:	f7f8 f86d 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008ebe:	bf00      	nop
 8008ec0:	3728      	adds	r7, #40	; 0x28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40013000 	.word	0x40013000
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	40020000 	.word	0x40020000

08008ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0b      	ldr	r2, [pc, #44]	; (8008f10 <HAL_TIM_Base_MspInit+0x3c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d10d      	bne.n	8008f02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <HAL_TIM_Base_MspInit+0x40>)
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	4a09      	ldr	r2, [pc, #36]	; (8008f14 <HAL_TIM_Base_MspInit+0x40>)
 8008ef0:	f043 0304 	orr.w	r3, r3, #4
 8008ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <HAL_TIM_Base_MspInit+0x40>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008f02:	bf00      	nop
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40023800 	.word	0x40023800

08008f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	609a      	str	r2, [r3, #8]
 8008f2c:	60da      	str	r2, [r3, #12]
 8008f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a12      	ldr	r2, [pc, #72]	; (8008f80 <HAL_TIM_MspPostInit+0x68>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d11e      	bne.n	8008f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
 8008f3e:	4b11      	ldr	r3, [pc, #68]	; (8008f84 <HAL_TIM_MspPostInit+0x6c>)
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <HAL_TIM_MspPostInit+0x6c>)
 8008f44:	f043 0308 	orr.w	r3, r3, #8
 8008f48:	6313      	str	r3, [r2, #48]	; 0x30
 8008f4a:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <HAL_TIM_MspPostInit+0x6c>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	60bb      	str	r3, [r7, #8]
 8008f54:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	4619      	mov	r1, r3
 8008f72:	4805      	ldr	r0, [pc, #20]	; (8008f88 <HAL_TIM_MspPostInit+0x70>)
 8008f74:	f7f8 f810 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008f78:	bf00      	nop
 8008f7a:	3720      	adds	r7, #32
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40023800 	.word	0x40023800
 8008f88:	40020c00 	.word	0x40020c00

08008f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	; 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	605a      	str	r2, [r3, #4]
 8008f9e:	609a      	str	r2, [r3, #8]
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <HAL_UART_MspInit+0x84>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d12b      	bne.n	8009006 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008fae:	2300      	movs	r3, #0
 8008fb0:	613b      	str	r3, [r7, #16]
 8008fb2:	4b18      	ldr	r3, [pc, #96]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb6:	4a17      	ldr	r2, [pc, #92]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8008fbe:	4b15      	ldr	r3, [pc, #84]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]
 8008fce:	4b11      	ldr	r3, [pc, #68]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd2:	4a10      	ldr	r2, [pc, #64]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008fda:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <HAL_UART_MspInit+0x88>)
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fea:	2302      	movs	r3, #2
 8008fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ff6:	2307      	movs	r3, #7
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ffa:	f107 0314 	add.w	r3, r7, #20
 8008ffe:	4619      	mov	r1, r3
 8009000:	4805      	ldr	r0, [pc, #20]	; (8009018 <HAL_UART_MspInit+0x8c>)
 8009002:	f7f7 ffc9 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009006:	bf00      	nop
 8009008:	3728      	adds	r7, #40	; 0x28
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	40004400 	.word	0x40004400
 8009014:	40023800 	.word	0x40023800
 8009018:	40020000 	.word	0x40020000

0800901c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009020:	bf00      	nop
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800902a:	b480      	push	{r7}
 800902c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800902e:	e7fe      	b.n	800902e <HardFault_Handler+0x4>

08009030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009034:	e7fe      	b.n	8009034 <MemManage_Handler+0x4>

08009036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009036:	b480      	push	{r7}
 8009038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800903a:	e7fe      	b.n	800903a <BusFault_Handler+0x4>

0800903c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009040:	e7fe      	b.n	8009040 <UsageFault_Handler+0x4>

08009042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009042:	b480      	push	{r7}
 8009044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009046:	bf00      	nop
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800905e:	b480      	push	{r7}
 8009060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009062:	bf00      	nop
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009070:	f7f7 fa84 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009074:	bf00      	nop
 8009076:	bd80      	pop	{r7, pc}

08009078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800907c:	4802      	ldr	r0, [pc, #8]	; (8009088 <OTG_FS_IRQHandler+0x10>)
 800907e:	f7f8 fbf7 	bl	8001870 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	2000064c 	.word	0x2000064c

0800908c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009094:	4b11      	ldr	r3, [pc, #68]	; (80090dc <_sbrk+0x50>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <_sbrk+0x16>
		heap_end = &end;
 800909c:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <_sbrk+0x50>)
 800909e:	4a10      	ldr	r2, [pc, #64]	; (80090e0 <_sbrk+0x54>)
 80090a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <_sbrk+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80090a8:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <_sbrk+0x50>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4413      	add	r3, r2
 80090b0:	466a      	mov	r2, sp
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d907      	bls.n	80090c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80090b6:	f000 fb5d 	bl	8009774 <__errno>
 80090ba:	4602      	mov	r2, r0
 80090bc:	230c      	movs	r3, #12
 80090be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80090c0:	f04f 33ff 	mov.w	r3, #4294967295
 80090c4:	e006      	b.n	80090d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80090c6:	4b05      	ldr	r3, [pc, #20]	; (80090dc <_sbrk+0x50>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	4a03      	ldr	r2, [pc, #12]	; (80090dc <_sbrk+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80090d2:	68fb      	ldr	r3, [r7, #12]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	200000b0 	.word	0x200000b0
 80090e0:	20000918 	.word	0x20000918

080090e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090e8:	4b08      	ldr	r3, [pc, #32]	; (800910c <SystemInit+0x28>)
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	4a07      	ldr	r2, [pc, #28]	; (800910c <SystemInit+0x28>)
 80090f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <SystemInit+0x28>)
 80090fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80090fe:	609a      	str	r2, [r3, #8]
#endif
}
 8009100:	bf00      	nop
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	e000ed00 	.word	0xe000ed00

08009110 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009114:	2201      	movs	r2, #1
 8009116:	490e      	ldr	r1, [pc, #56]	; (8009150 <MX_USB_HOST_Init+0x40>)
 8009118:	480e      	ldr	r0, [pc, #56]	; (8009154 <MX_USB_HOST_Init+0x44>)
 800911a:	f7fd ff39 	bl	8006f90 <USBH_Init>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009124:	f7ff fd6a 	bl	8008bfc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009128:	490b      	ldr	r1, [pc, #44]	; (8009158 <MX_USB_HOST_Init+0x48>)
 800912a:	480a      	ldr	r0, [pc, #40]	; (8009154 <MX_USB_HOST_Init+0x44>)
 800912c:	f7fd ffa3 	bl	8007076 <USBH_RegisterClass>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009136:	f7ff fd61 	bl	8008bfc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800913a:	4806      	ldr	r0, [pc, #24]	; (8009154 <MX_USB_HOST_Init+0x44>)
 800913c:	f7fe f828 	bl	8007190 <USBH_Start>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009146:	f7ff fd59 	bl	8008bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	08009171 	.word	0x08009171
 8009154:	20000280 	.word	0x20000280
 8009158:	20000008 	.word	0x20000008

0800915c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009160:	4802      	ldr	r0, [pc, #8]	; (800916c <MX_USB_HOST_Process+0x10>)
 8009162:	f7fe f825 	bl	80071b0 <USBH_Process>
}
 8009166:	bf00      	nop
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000280 	.word	0x20000280

08009170 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b04      	cmp	r3, #4
 8009182:	d819      	bhi.n	80091b8 <USBH_UserProcess+0x48>
 8009184:	a201      	add	r2, pc, #4	; (adr r2, 800918c <USBH_UserProcess+0x1c>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091b9 	.word	0x080091b9
 8009190:	080091a9 	.word	0x080091a9
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091b1 	.word	0x080091b1
 800919c:	080091a1 	.word	0x080091a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091a0:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <USBH_UserProcess+0x58>)
 80091a2:	2203      	movs	r2, #3
 80091a4:	701a      	strb	r2, [r3, #0]
  break;
 80091a6:	e008      	b.n	80091ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <USBH_UserProcess+0x58>)
 80091aa:	2202      	movs	r2, #2
 80091ac:	701a      	strb	r2, [r3, #0]
  break;
 80091ae:	e004      	b.n	80091ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <USBH_UserProcess+0x58>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	701a      	strb	r2, [r3, #0]
  break;
 80091b6:	e000      	b.n	80091ba <USBH_UserProcess+0x4a>

  default:
  break;
 80091b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	200000b4 	.word	0x200000b4

080091cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ec:	d147      	bne.n	800927e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ee:	2300      	movs	r3, #0
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	4b25      	ldr	r3, [pc, #148]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	4a24      	ldr	r2, [pc, #144]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	6313      	str	r3, [r2, #48]	; 0x30
 80091fe:	4b22      	ldr	r3, [pc, #136]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800920a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800920e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009210:	2300      	movs	r3, #0
 8009212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009218:	f107 0314 	add.w	r3, r7, #20
 800921c:	4619      	mov	r1, r3
 800921e:	481b      	ldr	r0, [pc, #108]	; (800928c <HAL_HCD_MspInit+0xc0>)
 8009220:	f7f7 feba 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009224:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800922a:	2302      	movs	r3, #2
 800922c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009232:	2300      	movs	r3, #0
 8009234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009236:	230a      	movs	r3, #10
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800923a:	f107 0314 	add.w	r3, r7, #20
 800923e:	4619      	mov	r1, r3
 8009240:	4812      	ldr	r0, [pc, #72]	; (800928c <HAL_HCD_MspInit+0xc0>)
 8009242:	f7f7 fea9 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009246:	4b10      	ldr	r3, [pc, #64]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 8009248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924a:	4a0f      	ldr	r2, [pc, #60]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 800924c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009250:	6353      	str	r3, [r2, #52]	; 0x34
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 8009258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925a:	4a0b      	ldr	r2, [pc, #44]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 800925c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009260:	6453      	str	r3, [r2, #68]	; 0x44
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <HAL_HCD_MspInit+0xbc>)
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	2043      	movs	r0, #67	; 0x43
 8009274:	f7f7 fe59 	bl	8000f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009278:	2043      	movs	r0, #67	; 0x43
 800927a:	f7f7 fe72 	bl	8000f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800927e:	bf00      	nop
 8009280:	3728      	adds	r7, #40	; 0x28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	40023800 	.word	0x40023800
 800928c:	40020000 	.word	0x40020000

08009290 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fa37 	bl	8007712 <USBH_LL_IncTimer>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fa7c 	bl	80077b8 <USBH_LL_Connect>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fa94 	bl	8007804 <USBH_LL_Disconnect>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
 80092f0:	4613      	mov	r3, r2
 80092f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fa29 	bl	8007766 <USBH_LL_PortEnabled>
} 
 8009314:	bf00      	nop
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fa29 	bl	8007782 <USBH_LL_PortDisabled>
} 
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8009346:	2b01      	cmp	r3, #1
 8009348:	d12a      	bne.n	80093a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800934a:	4a18      	ldr	r2, [pc, #96]	; (80093ac <USBH_LL_Init+0x74>)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a15      	ldr	r2, [pc, #84]	; (80093ac <USBH_LL_Init+0x74>)
 8009356:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800935a:	4b14      	ldr	r3, [pc, #80]	; (80093ac <USBH_LL_Init+0x74>)
 800935c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009360:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009362:	4b12      	ldr	r3, [pc, #72]	; (80093ac <USBH_LL_Init+0x74>)
 8009364:	2208      	movs	r2, #8
 8009366:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009368:	4b10      	ldr	r3, [pc, #64]	; (80093ac <USBH_LL_Init+0x74>)
 800936a:	2201      	movs	r2, #1
 800936c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <USBH_LL_Init+0x74>)
 8009370:	2200      	movs	r2, #0
 8009372:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <USBH_LL_Init+0x74>)
 8009376:	2202      	movs	r2, #2
 8009378:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <USBH_LL_Init+0x74>)
 800937c:	2200      	movs	r2, #0
 800937e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009380:	480a      	ldr	r0, [pc, #40]	; (80093ac <USBH_LL_Init+0x74>)
 8009382:	f7f7 ffef 	bl	8001364 <HAL_HCD_Init>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800938c:	f7ff fc36 	bl	8008bfc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009390:	4806      	ldr	r0, [pc, #24]	; (80093ac <USBH_LL_Init+0x74>)
 8009392:	f7f8 fbeb 	bl	8001b6c <HAL_HCD_GetCurrentFrame>
 8009396:	4603      	mov	r3, r0
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7fe f9aa 	bl	80076f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	2000064c 	.word	0x2000064c

080093b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f8 fb58 	bl	8001a7c <HAL_HCD_Start>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f95c 	bl	8009690 <USBH_Get_USB_Status>
 80093d8:	4603      	mov	r3, r0
 80093da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f8 fb60 	bl	8001ac2 <HAL_HCD_Stop>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 f941 	bl	8009690 <USBH_Get_USB_Status>
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009412:	7bbb      	ldrb	r3, [r7, #14]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800942e:	4618      	mov	r0, r3
 8009430:	f7f8 fbaa 	bl	8001b88 <HAL_HCD_GetCurrentSpeed>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d007      	beq.n	800944a <USBH_LL_GetSpeed+0x2e>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d302      	bcc.n	8009444 <USBH_LL_GetSpeed+0x28>
 800943e:	2b02      	cmp	r3, #2
 8009440:	d006      	beq.n	8009450 <USBH_LL_GetSpeed+0x34>
 8009442:	e008      	b.n	8009456 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
    break;
 8009448:	e008      	b.n	800945c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800944a:	2301      	movs	r3, #1
 800944c:	73fb      	strb	r3, [r7, #15]
    break;
 800944e:	e005      	b.n	800945c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009450:	2302      	movs	r3, #2
 8009452:	73fb      	strb	r3, [r7, #15]
    break;
 8009454:	e002      	b.n	800945c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009456:	2301      	movs	r3, #1
 8009458:	73fb      	strb	r3, [r7, #15]
    break;
 800945a:	bf00      	nop
  }
  return  speed;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800947c:	4618      	mov	r0, r3
 800947e:	f7f8 fb3d 	bl	8001afc <HAL_HCD_ResetPort>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f901 	bl	8009690 <USBH_Get_USB_Status>
 800948e:	4603      	mov	r3, r0
 8009490:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009492:	7bbb      	ldrb	r3, [r7, #14]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f8 fb45 	bl	8001b42 <HAL_HCD_HC_GetXferCount>
 80094b8:	4603      	mov	r3, r0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80094c2:	b590      	push	{r4, r7, lr}
 80094c4:	b089      	sub	sp, #36	; 0x24
 80094c6:	af04      	add	r7, sp, #16
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	4608      	mov	r0, r1
 80094cc:	4611      	mov	r1, r2
 80094ce:	461a      	mov	r2, r3
 80094d0:	4603      	mov	r3, r0
 80094d2:	70fb      	strb	r3, [r7, #3]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70bb      	strb	r3, [r7, #2]
 80094d8:	4613      	mov	r3, r2
 80094da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80094ea:	787c      	ldrb	r4, [r7, #1]
 80094ec:	78ba      	ldrb	r2, [r7, #2]
 80094ee:	78f9      	ldrb	r1, [r7, #3]
 80094f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094f2:	9302      	str	r3, [sp, #8]
 80094f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4623      	mov	r3, r4
 8009502:	f7f7 ff91 	bl	8001428 <HAL_HCD_HC_Init>
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f8bf 	bl	8009690 <USBH_Get_USB_Status>
 8009512:	4603      	mov	r3, r0
 8009514:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009516:	7bbb      	ldrb	r3, [r7, #14]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	bd90      	pop	{r4, r7, pc}

08009520 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f7f8 f80a 	bl	8001558 <HAL_HCD_HC_Halt>
 8009544:	4603      	mov	r3, r0
 8009546:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	4618      	mov	r0, r3
 800954c:	f000 f8a0 	bl	8009690 <USBH_Get_USB_Status>
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009554:	7bbb      	ldrb	r3, [r7, #14]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800955e:	b590      	push	{r4, r7, lr}
 8009560:	b089      	sub	sp, #36	; 0x24
 8009562:	af04      	add	r7, sp, #16
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	4608      	mov	r0, r1
 8009568:	4611      	mov	r1, r2
 800956a:	461a      	mov	r2, r3
 800956c:	4603      	mov	r3, r0
 800956e:	70fb      	strb	r3, [r7, #3]
 8009570:	460b      	mov	r3, r1
 8009572:	70bb      	strb	r3, [r7, #2]
 8009574:	4613      	mov	r3, r2
 8009576:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8009586:	787c      	ldrb	r4, [r7, #1]
 8009588:	78ba      	ldrb	r2, [r7, #2]
 800958a:	78f9      	ldrb	r1, [r7, #3]
 800958c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009590:	9303      	str	r3, [sp, #12]
 8009592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009594:	9302      	str	r3, [sp, #8]
 8009596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4623      	mov	r3, r4
 80095a2:	f7f7 fffd 	bl	80015a0 <HAL_HCD_HC_SubmitRequest>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f86f 	bl	8009690 <USBH_Get_USB_Status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd90      	pop	{r4, r7, pc}

080095c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f8 fa9e 	bl	8001b18 <HAL_HCD_HC_GetURBState>
 80095dc:	4603      	mov	r3, r0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	460b      	mov	r3, r1
 80095f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d103      	bne.n	8009604 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f872 	bl	80096e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009604:	20c8      	movs	r0, #200	; 0xc8
 8009606:	f7f6 ffd9 	bl	80005bc <HAL_Delay>
  return USBH_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
 8009620:	4613      	mov	r3, r2
 8009622:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800962a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	440b      	add	r3, r1
 800963a:	333b      	adds	r3, #59	; 0x3b
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	68f9      	ldr	r1, [r7, #12]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	00db      	lsls	r3, r3, #3
 800964e:	440b      	add	r3, r1
 8009650:	3350      	adds	r3, #80	; 0x50
 8009652:	78ba      	ldrb	r2, [r7, #2]
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	e009      	b.n	800966c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009658:	78fa      	ldrb	r2, [r7, #3]
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	440b      	add	r3, r1
 8009666:	3351      	adds	r3, #81	; 0x51
 8009668:	78ba      	ldrb	r2, [r7, #2]
 800966a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3714      	adds	r7, #20
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f7f6 ff9a 	bl	80005bc <HAL_Delay>
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d817      	bhi.n	80096d4 <USBH_Get_USB_Status+0x44>
 80096a4:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <USBH_Get_USB_Status+0x1c>)
 80096a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096aa:	bf00      	nop
 80096ac:	080096bd 	.word	0x080096bd
 80096b0:	080096c3 	.word	0x080096c3
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096cf 	.word	0x080096cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
    break;
 80096c0:	e00b      	b.n	80096da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80096c2:	2302      	movs	r3, #2
 80096c4:	73fb      	strb	r3, [r7, #15]
    break;
 80096c6:	e008      	b.n	80096da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80096c8:	2301      	movs	r3, #1
 80096ca:	73fb      	strb	r3, [r7, #15]
    break;
 80096cc:	e005      	b.n	80096da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80096ce:	2302      	movs	r3, #2
 80096d0:	73fb      	strb	r3, [r7, #15]
    break;
 80096d2:	e002      	b.n	80096da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80096d4:	2302      	movs	r3, #2
 80096d6:	73fb      	strb	r3, [r7, #15]
    break;
 80096d8:	bf00      	nop
  }
  return usb_status;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d102      	bne.n	8009702 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80096fc:	2301      	movs	r3, #1
 80096fe:	73fb      	strb	r3, [r7, #15]
 8009700:	e001      	b.n	8009706 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	461a      	mov	r2, r3
 800970a:	2101      	movs	r1, #1
 800970c:	4803      	ldr	r0, [pc, #12]	; (800971c <MX_DriverVbusFS+0x34>)
 800970e:	f7f7 fdf5 	bl	80012fc <HAL_GPIO_WritePin>
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40020800 	.word	0x40020800

08009720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009726:	e003      	b.n	8009730 <LoopCopyDataInit>

08009728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009728:	4b0c      	ldr	r3, [pc, #48]	; (800975c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800972a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800972c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800972e:	3104      	adds	r1, #4

08009730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009730:	480b      	ldr	r0, [pc, #44]	; (8009760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009738:	d3f6      	bcc.n	8009728 <CopyDataInit>
  ldr  r2, =_sbss
 800973a:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800973c:	e002      	b.n	8009744 <LoopFillZerobss>

0800973e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800973e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009740:	f842 3b04 	str.w	r3, [r2], #4

08009744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009744:	4b09      	ldr	r3, [pc, #36]	; (800976c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009748:	d3f9      	bcc.n	800973e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800974a:	f7ff fccb 	bl	80090e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800974e:	f000 f817 	bl	8009780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009752:	f7fe fe5b 	bl	800840c <main>
  bx  lr    
 8009756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009758:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800975c:	080099d0 	.word	0x080099d0
  ldr  r0, =_sdata
 8009760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009764:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8009768:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800976c:	20000914 	.word	0x20000914

08009770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009770:	e7fe      	b.n	8009770 <ADC_IRQHandler>
	...

08009774 <__errno>:
 8009774:	4b01      	ldr	r3, [pc, #4]	; (800977c <__errno+0x8>)
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	2000002c 	.word	0x2000002c

08009780 <__libc_init_array>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4e0d      	ldr	r6, [pc, #52]	; (80097b8 <__libc_init_array+0x38>)
 8009784:	4c0d      	ldr	r4, [pc, #52]	; (80097bc <__libc_init_array+0x3c>)
 8009786:	1ba4      	subs	r4, r4, r6
 8009788:	10a4      	asrs	r4, r4, #2
 800978a:	2500      	movs	r5, #0
 800978c:	42a5      	cmp	r5, r4
 800978e:	d109      	bne.n	80097a4 <__libc_init_array+0x24>
 8009790:	4e0b      	ldr	r6, [pc, #44]	; (80097c0 <__libc_init_array+0x40>)
 8009792:	4c0c      	ldr	r4, [pc, #48]	; (80097c4 <__libc_init_array+0x44>)
 8009794:	f000 f8ea 	bl	800996c <_init>
 8009798:	1ba4      	subs	r4, r4, r6
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	2500      	movs	r5, #0
 800979e:	42a5      	cmp	r5, r4
 80097a0:	d105      	bne.n	80097ae <__libc_init_array+0x2e>
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097a8:	4798      	blx	r3
 80097aa:	3501      	adds	r5, #1
 80097ac:	e7ee      	b.n	800978c <__libc_init_array+0xc>
 80097ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097b2:	4798      	blx	r3
 80097b4:	3501      	adds	r5, #1
 80097b6:	e7f2      	b.n	800979e <__libc_init_array+0x1e>
 80097b8:	080099c8 	.word	0x080099c8
 80097bc:	080099c8 	.word	0x080099c8
 80097c0:	080099c8 	.word	0x080099c8
 80097c4:	080099cc 	.word	0x080099cc

080097c8 <malloc>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <malloc+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f000 b861 	b.w	8009894 <_malloc_r>
 80097d2:	bf00      	nop
 80097d4:	2000002c 	.word	0x2000002c

080097d8 <free>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <free+0xc>)
 80097da:	4601      	mov	r1, r0
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f000 b80b 	b.w	80097f8 <_free_r>
 80097e2:	bf00      	nop
 80097e4:	2000002c 	.word	0x2000002c

080097e8 <memset>:
 80097e8:	4402      	add	r2, r0
 80097ea:	4603      	mov	r3, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <_free_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4605      	mov	r5, r0
 80097fc:	2900      	cmp	r1, #0
 80097fe:	d045      	beq.n	800988c <_free_r+0x94>
 8009800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009804:	1f0c      	subs	r4, r1, #4
 8009806:	2b00      	cmp	r3, #0
 8009808:	bfb8      	it	lt
 800980a:	18e4      	addlt	r4, r4, r3
 800980c:	f000 f8ac 	bl	8009968 <__malloc_lock>
 8009810:	4a1f      	ldr	r2, [pc, #124]	; (8009890 <_free_r+0x98>)
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	4610      	mov	r0, r2
 8009816:	b933      	cbnz	r3, 8009826 <_free_r+0x2e>
 8009818:	6063      	str	r3, [r4, #4]
 800981a:	6014      	str	r4, [r2, #0]
 800981c:	4628      	mov	r0, r5
 800981e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009822:	f000 b8a2 	b.w	800996a <__malloc_unlock>
 8009826:	42a3      	cmp	r3, r4
 8009828:	d90c      	bls.n	8009844 <_free_r+0x4c>
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	1862      	adds	r2, r4, r1
 800982e:	4293      	cmp	r3, r2
 8009830:	bf04      	itt	eq
 8009832:	681a      	ldreq	r2, [r3, #0]
 8009834:	685b      	ldreq	r3, [r3, #4]
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	bf04      	itt	eq
 800983a:	1852      	addeq	r2, r2, r1
 800983c:	6022      	streq	r2, [r4, #0]
 800983e:	6004      	str	r4, [r0, #0]
 8009840:	e7ec      	b.n	800981c <_free_r+0x24>
 8009842:	4613      	mov	r3, r2
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	b10a      	cbz	r2, 800984c <_free_r+0x54>
 8009848:	42a2      	cmp	r2, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x4a>
 800984c:	6819      	ldr	r1, [r3, #0]
 800984e:	1858      	adds	r0, r3, r1
 8009850:	42a0      	cmp	r0, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x74>
 8009854:	6820      	ldr	r0, [r4, #0]
 8009856:	4401      	add	r1, r0
 8009858:	1858      	adds	r0, r3, r1
 800985a:	4282      	cmp	r2, r0
 800985c:	6019      	str	r1, [r3, #0]
 800985e:	d1dd      	bne.n	800981c <_free_r+0x24>
 8009860:	6810      	ldr	r0, [r2, #0]
 8009862:	6852      	ldr	r2, [r2, #4]
 8009864:	605a      	str	r2, [r3, #4]
 8009866:	4401      	add	r1, r0
 8009868:	6019      	str	r1, [r3, #0]
 800986a:	e7d7      	b.n	800981c <_free_r+0x24>
 800986c:	d902      	bls.n	8009874 <_free_r+0x7c>
 800986e:	230c      	movs	r3, #12
 8009870:	602b      	str	r3, [r5, #0]
 8009872:	e7d3      	b.n	800981c <_free_r+0x24>
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	1821      	adds	r1, r4, r0
 8009878:	428a      	cmp	r2, r1
 800987a:	bf04      	itt	eq
 800987c:	6811      	ldreq	r1, [r2, #0]
 800987e:	6852      	ldreq	r2, [r2, #4]
 8009880:	6062      	str	r2, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1809      	addeq	r1, r1, r0
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	605c      	str	r4, [r3, #4]
 800988a:	e7c7      	b.n	800981c <_free_r+0x24>
 800988c:	bd38      	pop	{r3, r4, r5, pc}
 800988e:	bf00      	nop
 8009890:	200000b8 	.word	0x200000b8

08009894 <_malloc_r>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	1ccd      	adds	r5, r1, #3
 8009898:	f025 0503 	bic.w	r5, r5, #3
 800989c:	3508      	adds	r5, #8
 800989e:	2d0c      	cmp	r5, #12
 80098a0:	bf38      	it	cc
 80098a2:	250c      	movcc	r5, #12
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	4606      	mov	r6, r0
 80098a8:	db01      	blt.n	80098ae <_malloc_r+0x1a>
 80098aa:	42a9      	cmp	r1, r5
 80098ac:	d903      	bls.n	80098b6 <_malloc_r+0x22>
 80098ae:	230c      	movs	r3, #12
 80098b0:	6033      	str	r3, [r6, #0]
 80098b2:	2000      	movs	r0, #0
 80098b4:	bd70      	pop	{r4, r5, r6, pc}
 80098b6:	f000 f857 	bl	8009968 <__malloc_lock>
 80098ba:	4a21      	ldr	r2, [pc, #132]	; (8009940 <_malloc_r+0xac>)
 80098bc:	6814      	ldr	r4, [r2, #0]
 80098be:	4621      	mov	r1, r4
 80098c0:	b991      	cbnz	r1, 80098e8 <_malloc_r+0x54>
 80098c2:	4c20      	ldr	r4, [pc, #128]	; (8009944 <_malloc_r+0xb0>)
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	b91b      	cbnz	r3, 80098d0 <_malloc_r+0x3c>
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f83d 	bl	8009948 <_sbrk_r>
 80098ce:	6020      	str	r0, [r4, #0]
 80098d0:	4629      	mov	r1, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f838 	bl	8009948 <_sbrk_r>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d124      	bne.n	8009926 <_malloc_r+0x92>
 80098dc:	230c      	movs	r3, #12
 80098de:	6033      	str	r3, [r6, #0]
 80098e0:	4630      	mov	r0, r6
 80098e2:	f000 f842 	bl	800996a <__malloc_unlock>
 80098e6:	e7e4      	b.n	80098b2 <_malloc_r+0x1e>
 80098e8:	680b      	ldr	r3, [r1, #0]
 80098ea:	1b5b      	subs	r3, r3, r5
 80098ec:	d418      	bmi.n	8009920 <_malloc_r+0x8c>
 80098ee:	2b0b      	cmp	r3, #11
 80098f0:	d90f      	bls.n	8009912 <_malloc_r+0x7e>
 80098f2:	600b      	str	r3, [r1, #0]
 80098f4:	50cd      	str	r5, [r1, r3]
 80098f6:	18cc      	adds	r4, r1, r3
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f836 	bl	800996a <__malloc_unlock>
 80098fe:	f104 000b 	add.w	r0, r4, #11
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	f020 0007 	bic.w	r0, r0, #7
 8009908:	1ac3      	subs	r3, r0, r3
 800990a:	d0d3      	beq.n	80098b4 <_malloc_r+0x20>
 800990c:	425a      	negs	r2, r3
 800990e:	50e2      	str	r2, [r4, r3]
 8009910:	e7d0      	b.n	80098b4 <_malloc_r+0x20>
 8009912:	428c      	cmp	r4, r1
 8009914:	684b      	ldr	r3, [r1, #4]
 8009916:	bf16      	itet	ne
 8009918:	6063      	strne	r3, [r4, #4]
 800991a:	6013      	streq	r3, [r2, #0]
 800991c:	460c      	movne	r4, r1
 800991e:	e7eb      	b.n	80098f8 <_malloc_r+0x64>
 8009920:	460c      	mov	r4, r1
 8009922:	6849      	ldr	r1, [r1, #4]
 8009924:	e7cc      	b.n	80098c0 <_malloc_r+0x2c>
 8009926:	1cc4      	adds	r4, r0, #3
 8009928:	f024 0403 	bic.w	r4, r4, #3
 800992c:	42a0      	cmp	r0, r4
 800992e:	d005      	beq.n	800993c <_malloc_r+0xa8>
 8009930:	1a21      	subs	r1, r4, r0
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f808 	bl	8009948 <_sbrk_r>
 8009938:	3001      	adds	r0, #1
 800993a:	d0cf      	beq.n	80098dc <_malloc_r+0x48>
 800993c:	6025      	str	r5, [r4, #0]
 800993e:	e7db      	b.n	80098f8 <_malloc_r+0x64>
 8009940:	200000b8 	.word	0x200000b8
 8009944:	200000bc 	.word	0x200000bc

08009948 <_sbrk_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4c06      	ldr	r4, [pc, #24]	; (8009964 <_sbrk_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4605      	mov	r5, r0
 8009950:	4608      	mov	r0, r1
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	f7ff fb9a 	bl	800908c <_sbrk>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_sbrk_r+0x1a>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	b103      	cbz	r3, 8009962 <_sbrk_r+0x1a>
 8009960:	602b      	str	r3, [r5, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20000910 	.word	0x20000910

08009968 <__malloc_lock>:
 8009968:	4770      	bx	lr

0800996a <__malloc_unlock>:
 800996a:	4770      	bx	lr

0800996c <_init>:
 800996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996e:	bf00      	nop
 8009970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009972:	bc08      	pop	{r3}
 8009974:	469e      	mov	lr, r3
 8009976:	4770      	bx	lr

08009978 <_fini>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	bf00      	nop
 800997c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997e:	bc08      	pop	{r3}
 8009980:	469e      	mov	lr, r3
 8009982:	4770      	bx	lr
